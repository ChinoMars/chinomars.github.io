{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/archer/source/assets/algolia_logo.svg","path":"assets/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/example_qr.png","path":"assets/example_qr.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/loading.svg","path":"assets/loading.svg","modified":0,"renderable":1},{"_id":"themes/archer/source/css/mobile.css","path":"css/mobile.css","modified":0,"renderable":1},{"_id":"themes/archer/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff","path":"font/Source Sans Pro.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","path":"font/Source Sans Pro.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/lib/webfontloader.min.js","path":"lib/webfontloader.min.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/search.js","path":"scripts/search.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/main.js","path":"scripts/main.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/share.js","path":"scripts/share.js","modified":0,"renderable":1},{"_id":"themes/archer/source/avatar/Suzumiya.jpg","path":"avatar/Suzumiya.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","path":"font/Oswald-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","path":"font/SourceCodePro-Regular.ttf.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","path":"font/SourceCodePro-Regular.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/404-bg.jpg","path":"intro/404-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/lib/jquery.min.js","path":"lib/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/about-bg.jpg","path":"intro/about-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/post-bg.jpg","path":"intro/post-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/index-bg.jpg","path":"intro/index-bg.jpg","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/archer/source/assets/favicon.ico","path":"assets/favicon.ico","modified":0,"renderable":1}],"Cache":[{"_id":"themes/archer/.gitignore","hash":"e2d7fa953bade3b94ed1cab25ffcf442c7540433","modified":1580365563292},{"_id":"themes/archer/.eslintrc.json","hash":"35eeca97fa5a2d0c6d78ef1257c58f03c42d43df","modified":1580365563327},{"_id":"themes/archer/.prettierignore","hash":"58caf761f07e5df9cdc21f7f19f0670fde41089b","modified":1580365563290},{"_id":"themes/archer/.gitattributes","hash":"82c1a621642d5b620275ae1ed59845c3f7015a64","modified":1580365563299},{"_id":"themes/archer/_config.yml","hash":"85339fd65675e5ae9ae966e61810535d219ab309","modified":1696693124314},{"_id":"themes/archer/.prettierrc.js","hash":"875b0b95f6eb24a23e4ea83a75709b97897135e0","modified":1580365563296},{"_id":"themes/archer/LICENSE","hash":"0da0c361bf299375739c6b668a44af0f5faf37bb","modified":1580365563238},{"_id":"themes/archer/README.md","hash":"97edb54cb7aecff714f132110ed4ba8215da7136","modified":1580365563291},{"_id":"themes/archer/gulpfile.js","hash":"46dfe693b00ac4dea4d1b1af56f5ced4ee095c10","modified":1580365563300},{"_id":"themes/archer/package.json","hash":"531fe40833ca63493f62adfa249b6434310a2d0a","modified":1580365563294},{"_id":"source/404.md","hash":"aa3653d7c20950b77042081990d42405d01406b1","modified":1580365563236},{"_id":"themes/archer/webpack.config.js","hash":"d20b6350c50e2981484cb9356a3e21a2124bcd72","modified":1580365563285},{"_id":"themes/archer/webpack.prod.js","hash":"48de76cfa6274895801d3afc89ecbf04ee182a1c","modified":1580365563296},{"_id":"themes/archer/dev/archer.sh","hash":"4065c4e55462d5ecf016464adea0d1db967ef4b4","modified":1580365563301},{"_id":"themes/archer/docs/README-en.md","hash":"f325565c0bb94501fd046268659c7752709895d1","modified":1580365563289},{"_id":"themes/archer/docs/develop-guide-zh.md","hash":"effc2bc9e0cecfd228b19283337ff29649ea5985","modified":1580365563285},{"_id":"themes/archer/docs/develop-guide-en.md","hash":"0bb09c3c9d5f56820cb84e3316f60352b731d70c","modified":1580365563286},{"_id":"themes/archer/languages/en.yml","hash":"ad75d3e5f7f5f0463d3077e1b5a26f40938a1faa","modified":1580365563291},{"_id":"themes/archer/languages/default.yml","hash":"d56b6923c70efdef09cd1f0270d7adc9cc338f6b","modified":1580365563290},{"_id":"themes/archer/layout/404.ejs","hash":"879641b1b5e49c43f2e096cad281f7d74df05127","modified":1580365563240},{"_id":"themes/archer/layout/about.ejs","hash":"06019d835c0a51fed8aa086d1dfcf368f9921b42","modified":1580365563245},{"_id":"themes/archer/layout/post.ejs","hash":"b61156aff41641a14d5e4e45d9fd776309f2801a","modified":1580365563240},{"_id":"themes/archer/layout/layout.ejs","hash":"08ebd10c1b2bfc11be8f5115a836a98e6c6ba13c","modified":1580365563242},{"_id":"themes/archer/layout/site-meta.ejs","hash":"d866aa1a892d4bfe3368f6dbd0f1baa8c5831947","modified":1580365563243},{"_id":"themes/archer/layout/index.ejs","hash":"716ba4a30860e36077dfdfffa02c1cd60301d8a3","modified":1580365563241},{"_id":"source/_posts/REPL技术分析——Python的交互式.md","hash":"26ce095f21e2b4d6b9c6fa35bb9ccd3a0b8a30f3","modified":1581438075106},{"_id":"source/_posts/REPL技术分析——Swift-REPL模式.md","hash":"2313de2641d36c520e7032a55fe3e8728904d142","modified":1581067501910},{"_id":"source/_posts/基于Hexo和github-page搭建个人博客.md","hash":"f05a597fb49d6d6ebced643c227308a1f6f538db","modified":1580365563234},{"_id":"source/about/index.md","hash":"c81207c5a0150abbedb40afaa9303574c4e59f06","modified":1696688588212},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----other-issue-.md","hash":"4bf3c8ebef14a81bb55e8e0468d816e83c4133ac","modified":1580365563299},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----------bug--help-wanted-or-bug-report-.md","hash":"012bd3afea5565204f75d8c89048ad33b9c2f948","modified":1580365563298},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----feature-request-.md","hash":"886fb1252702d46c89536b579d35ce49e53ec54d","modified":1580365563298},{"_id":"themes/archer/layout/_partial/algolia.ejs","hash":"2f5f9073378f628a9124792b5301c1540bc5a264","modified":1580365563250},{"_id":"themes/archer/layout/_partial/base-background-image.ejs","hash":"82203d9a1c6e16ef2d37b8b587f56bf6d16edaf2","modified":1580365563260},{"_id":"themes/archer/layout/_partial/base-footer.ejs","hash":"7bfb8af21f7d30780d1a3af5484760b07b4fbb1d","modified":1580365563250},{"_id":"themes/archer/layout/_partial/base-head.ejs","hash":"f2e8d4dfd11d879491a4b10f74f8c886cd392240","modified":1580365563259},{"_id":"themes/archer/layout/_partial/base-header.ejs","hash":"12e28693dc53cab5f6fd389f15ea0f811c9c37e9","modified":1580365563250},{"_id":"themes/archer/layout/_partial/base-preload-polyfill.ejs","hash":"2aea84cb43f4479131620b3c3dfd7cebe9be36ba","modified":1580365563251},{"_id":"themes/archer/layout/_partial/base-profile.ejs","hash":"743d97452d4ac358e631c43c9c2120aafdfd3e24","modified":1580365563257},{"_id":"themes/archer/layout/_partial/base-social.ejs","hash":"2d068432031b3bebf9438c775370a2d1b4492d6b","modified":1580365563257},{"_id":"themes/archer/layout/_partial/base-title-tags.ejs","hash":"418559ab11726f69621c3a58cd21903adff1e48e","modified":1580365563258},{"_id":"themes/archer/layout/_partial/intro-height.ejs","hash":"cd0d34a811dc4666980d57c00d70dd82bd5450eb","modified":1580365563256},{"_id":"themes/archer/source/assets/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1580365563283},{"_id":"themes/archer/source/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1580365563284},{"_id":"themes/archer/source/assets/favicon.ico","hash":"933a804f4cf7a82e2039f340fe6bc3d5f413938e","modified":1580365563283},{"_id":"themes/archer/source/assets/loading.svg","hash":"45be17d07697d604d8981890eb21e308530c7a38","modified":1580365563284},{"_id":"themes/archer/source/css/mobile.css","hash":"51d7b5cf26c8f82a3daad4bc55518673fdf281f5","modified":1580365563272},{"_id":"themes/archer/source/css/style.css","hash":"5d5e869db0c62957d59c6865baaecd1428c51804","modified":1580365563270},{"_id":"themes/archer/source/avatar/.DS_Store","hash":"3e20bdd95c99735019db564ba59ba7267d2eb8be","modified":1580365563275},{"_id":"themes/archer/source/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1580365563281},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1580365563281},{"_id":"themes/archer/source/lib/webfontloader.min.js","hash":"bc6ffe9c0d8b3285564619a445c6ca575eb9d0f5","modified":1580365563277},{"_id":"themes/archer/source/intro/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1580365563263},{"_id":"themes/archer/source/scripts/search.js","hash":"d5f739e261e8ce74f993c6157b248663bda122bf","modified":1580365563273},{"_id":"themes/archer/source/scripts/main.js","hash":"e89a9651131684204118fa74bd19cb781d76a372","modified":1580365563273},{"_id":"themes/archer/source/scripts/share.js","hash":"bb5bb37ce7f47f8c084b232df3e5fe2378d7ca01","modified":1580365563274},{"_id":"themes/archer/src/js/browser.js","hash":"ce061db99db5b880db0ddb768246352ca885b13c","modified":1580365563335},{"_id":"themes/archer/src/js/fancybox.js","hash":"0daf0e83deca055102268e3bd95cb1962acc2264","modified":1580365563329},{"_id":"themes/archer/src/js/init.js","hash":"346c6ef75ae85e4350c1b0811985172fdaa0d3a5","modified":1580365563333},{"_id":"themes/archer/src/js/initSidebar.js","hash":"b25615ff254913db83e2a20263d445f35083843b","modified":1580365563334},{"_id":"themes/archer/src/js/main.js","hash":"e1a48d5822326792e38d44efee86e01473549eba","modified":1580365563333},{"_id":"themes/archer/src/js/scroll.js","hash":"aa2315a80daaa183a7e462c7e879ff9d2f050933","modified":1580365563330},{"_id":"themes/archer/src/js/search.js","hash":"2e59ac745da7c22801d9029cf9904a4fc3c384f1","modified":1580365563335},{"_id":"themes/archer/src/js/mobile.js","hash":"228a68d851517b5e47d2132f1d499cb812a64171","modified":1580365563329},{"_id":"themes/archer/src/js/share.js","hash":"1314b19a852e291e35d6809f7f58652d3e7c524c","modified":1580365563336},{"_id":"themes/archer/src/js/sidebar.js","hash":"68d5fe0ee5e86df810d304e5efe11e5e1fddc46d","modified":1580365563332},{"_id":"themes/archer/src/js/tag.js","hash":"e0f0a914c02922e42977d78dc4993b3855167cd8","modified":1580365563334},{"_id":"themes/archer/src/js/toc.js","hash":"b3482031e4c8728535d480bfaec76229469e3aba","modified":1580365563331},{"_id":"themes/archer/src/js/util.js","hash":"27de6446892bcf399430dd5776df0b8759ca0eea","modified":1580365563331},{"_id":"themes/archer/src/scss/_common.scss","hash":"dedc313b082e0a16daf87213badd21b13be11af8","modified":1580365563339},{"_id":"themes/archer/src/scss/_mixin.scss","hash":"e7deb20a16868ae9d3e35ba3c5693de71fdf6999","modified":1580365563337},{"_id":"themes/archer/src/scss/_normalize.scss","hash":"a2dbeb38ad08bb8975856d75954cc697bf8e5ff7","modified":1580365563347},{"_id":"themes/archer/src/scss/_variables.scss","hash":"136e5d990c4f8eadf6cabdfa5a053941e90bcd20","modified":1580365563337},{"_id":"themes/archer/src/scss/mobile.scss","hash":"aadc2fbf37fefc2ad391d8172d5b61817f9db0c5","modified":1580365563338},{"_id":"themes/archer/src/scss/style.scss","hash":"78e31370d45089b97fa91929345f1a29f2e6a0a2","modified":1580365563338},{"_id":"themes/archer/layout/_partial/comment/custom.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1580365563254},{"_id":"themes/archer/source/avatar/Suzumiya.jpg","hash":"e45598c5821756547a36d58258a44bc0593b59a9","modified":1580365563276},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1580365563282},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1580365563280},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1580365563279},{"_id":"themes/archer/source/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1580365563269},{"_id":"themes/archer/source/lib/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1580365563278},{"_id":"themes/archer/layout/_partial/comment/changyan.ejs","hash":"7691642fb9375607e0ac988a7420999e242cb2c9","modified":1580365563253},{"_id":"themes/archer/layout/_partial/comment/disqus.ejs","hash":"cadd97820a23d01d8b7e2f19a86e5290cef5a8a6","modified":1580365563253},{"_id":"themes/archer/layout/_partial/comment/gitment.ejs","hash":"794647a8a4ac9e1d01d74c07717175a141b1e01c","modified":1580365563256},{"_id":"themes/archer/layout/_partial/comment/livere.ejs","hash":"b27469f19f35ec2037c7bce736a12e9dfb5e360b","modified":1580365563255},{"_id":"themes/archer/layout/_partial/comment/valine.ejs","hash":"2154360e330dab94540e168e9d301c7b7091968e","modified":1580365563254},{"_id":"themes/archer/layout/_partial/comment/youyan.ejs","hash":"790d76f2667377db78a7d04bad8d629e47e7aab0","modified":1580365563255},{"_id":"themes/archer/layout/_partial/critical-css/critical-style.ejs","hash":"c03e16a7741908c207bf58363dcd1349cb639ef8","modified":1580365563252},{"_id":"themes/archer/layout/_partial/script/font-loader.ejs","hash":"291cc0a4a444a93b93c32e2c39383c70e36e46de","modified":1580365563258},{"_id":"themes/archer/layout/_partial/sidebar/base-sidebar.ejs","hash":"2d38af7cb5aabc0af99de239bd180c516ec4c56c","modified":1580365563249},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-archives.ejs","hash":"daa78b17a773bca569f1c8ca2c916495ca138da6","modified":1580365563248},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-categories.ejs","hash":"147214469c4909eb94943599883f9fa0f3cc090d","modified":1580365563247},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-tags.ejs","hash":"d6e1a192cac5dcf365ce1a52df4f23feafeeb849","modified":1580365563249},{"_id":"themes/archer/src/scss/_partial/_404.scss","hash":"a2b56f441a9a44d7f5b9b41eaa8136321328d7e9","modified":1580365563339},{"_id":"themes/archer/src/scss/_partial/_algolia.scss","hash":"c679578d2feb0bd7d3f80c2f693ba58cbca4428b","modified":1580365563341},{"_id":"themes/archer/src/scss/_partial/_index-page.scss","hash":"fa993cf0bbe0086cd8ec3d9a639b2d5b28ccfa8e","modified":1580365563341},{"_id":"themes/archer/src/scss/_partial/_post-page.scss","hash":"7c557844850d53cc4fc36aaf6d59847d8f238947","modified":1580365563341},{"_id":"themes/archer/package-lock.json","hash":"89a3b67d32f6916cdc21d590d87e43d8a44be8c3","modified":1580365563293},{"_id":"themes/archer/docs/snap.png","hash":"0b2a8bf016f6eed576abfdcdb7dcf8de51c12562","modified":1580365563288},{"_id":"themes/archer/source/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1580365563262},{"_id":"themes/archer/src/scss/_partial/_partial/_profile.scss","hash":"0c986b52ce9083f08c37c5c9b5de045ac5e1d2fa","modified":1580365563343},{"_id":"themes/archer/src/scss/_partial/_partial/_scrollbar.scss","hash":"f2514031f9d7e4ed4a126694e78618ce6ff3a574","modified":1580365563344},{"_id":"themes/archer/src/scss/_partial/_partial/_paginator.scss","hash":"67c2e697a5fbb3b8006cf358ea45eb7f75b496f8","modified":1580365563343},{"_id":"themes/archer/src/scss/_partial/_partial/_intro.scss","hash":"a1569f39eccd64a12425d81b794c53df126a4d87","modified":1580365563342},{"_id":"themes/archer/src/scss/_partial/_partial/_footer.scss","hash":"726c543ee066e0b3222b236d9b4ef0109c0bdddf","modified":1580365563344},{"_id":"themes/archer/src/scss/_partial/_partial/_header.scss","hash":"77003ff22b1a10fae2d2768938277959b3f93a72","modified":1580365563345},{"_id":"themes/archer/src/scss/_partial/_post/_code.scss","hash":"9c9a4e470da8732c9a3be3d5ce0d2f80f53714fe","modified":1580365563340},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-archive.scss","hash":"14bc42292873880c61b5fa9f47ee9d2e08d46871","modified":1580365563346},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-tags.scss","hash":"9ab6f96d0df0c4ad4c72e2515fa2599d487d8f1a","modified":1580365563345},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar.scss","hash":"981a94978535769cb51c29e12b627f83c6fcedc5","modified":1580365563346},{"_id":"themes/archer/source/intro/post-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1580365563267},{"_id":"themes/archer/source/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1580365563265},{"_id":"public/atom.xml","hash":"6ed498c216f98f9d83fedbcfd7bef018a6c5bd34","modified":1696694392189},{"_id":"public/404.html","hash":"dd4e9e38e03d146fb6c316d6bb1b4d813c37742b","modified":1696694392189},{"_id":"public/about/index.html","hash":"59503e4ff2fcaaea2049e7a30729a345383c902e","modified":1696694392189},{"_id":"public/2020/02/12/REPL技术分析——Python的交互式/index.html","hash":"e29d991cc316e5a20347d2a82fe942b1e2de59f3","modified":1591466739928},{"_id":"public/2020/02/07/REPL技术分析——Swift-REPL模式/index.html","hash":"7ebe3f0f6f1fbf961a6b4af2c685573036be54ec","modified":1591466739928},{"_id":"public/2020/01/29/基于Hexo和github-page搭建个人博客/index.html","hash":"da434c2722ab79a1b8ca23b1ddab77ffbe6334c7","modified":1696694392189},{"_id":"public/archives/index.html","hash":"f50d2fac33529569eccbcae6fdaec07b7f71c65a","modified":1696694392189},{"_id":"public/archives/2020/index.html","hash":"f50d2fac33529569eccbcae6fdaec07b7f71c65a","modified":1696694392189},{"_id":"public/archives/2020/01/index.html","hash":"2b4b223a12b1af9b84b9836364dd37134b9292d3","modified":1696694392189},{"_id":"public/archives/2020/02/index.html","hash":"73fc430f616982d587eabbbb5009b4e70c45f44f","modified":1696694392189},{"_id":"public/tags/Compiler/index.html","hash":"73fc430f616982d587eabbbb5009b4e70c45f44f","modified":1696694392189},{"_id":"public/tags/Python/index.html","hash":"f6e29218fca36ccdc1c6dc70e12bf15138a35ec8","modified":1696694392189},{"_id":"public/tags/Swift/index.html","hash":"53e2ffb5464632e17a91883b6f1589dba31acafa","modified":1696694392189},{"_id":"public/tags/小白/index.html","hash":"2b4b223a12b1af9b84b9836364dd37134b9292d3","modified":1696694392189},{"_id":"public/index.html","hash":"dccc5d1a6467773d24a0d81df7a68c55135493e6","modified":1696694392189},{"_id":"public/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1581438367978},{"_id":"public/assets/favicon.ico","hash":"933a804f4cf7a82e2039f340fe6bc3d5f413938e","modified":1581438367978},{"_id":"public/assets/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1581438367978},{"_id":"public/assets/loading.svg","hash":"45be17d07697d604d8981890eb21e308530c7a38","modified":1581438367978},{"_id":"public/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1581438367978},{"_id":"public/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1581438367978},{"_id":"public/avatar/Suzumiya.jpg","hash":"e45598c5821756547a36d58258a44bc0593b59a9","modified":1581438367978},{"_id":"public/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1581438367978},{"_id":"public/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1581438367978},{"_id":"public/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1581438367978},{"_id":"public/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1581438367978},{"_id":"public/assets/algolia/algoliasearchLite.min.js","hash":"284416885e4e80e27fa4eae6fc305f4de15b914c","modified":1581438367978},{"_id":"public/assets/algolia/algoliasearch.min.js","hash":"a3b131a9a47ccc16f4dd8988fabb6d306548db2f","modified":1581438367978},{"_id":"public/css/mobile.css","hash":"51d7b5cf26c8f82a3daad4bc55518673fdf281f5","modified":1581438367978},{"_id":"public/scripts/search.js","hash":"d5f739e261e8ce74f993c6157b248663bda122bf","modified":1581438367978},{"_id":"public/lib/webfontloader.min.js","hash":"bc6ffe9c0d8b3285564619a445c6ca575eb9d0f5","modified":1581438367978},{"_id":"public/css/style.css","hash":"5d5e869db0c62957d59c6865baaecd1428c51804","modified":1581438367978},{"_id":"public/scripts/share.js","hash":"bb5bb37ce7f47f8c084b232df3e5fe2378d7ca01","modified":1581438367978},{"_id":"public/scripts/main.js","hash":"e89a9651131684204118fa74bd19cb781d76a372","modified":1581438367978},{"_id":"public/lib/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1581438367978},{"_id":"public/assets/algolia/algoliasearchLite.js","hash":"e56ad6b82caf69066de545201014291fc961635e","modified":1581438367978},{"_id":"public/assets/algolia/algoliasearch.js","hash":"6948fcdf071e4983e784e8c458cf201536f77792","modified":1581438367978},{"_id":"public/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1581438367978},{"_id":"public/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1581438367978},{"_id":"public/intro/post-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1581438367978},{"_id":"themes/ascent/README.md","hash":"5f52da7d6773c07458c09ccd1d08f7b6d726417c","modified":1591282736209},{"_id":"themes/ascent/_config.yml","hash":"cc43cd41433d3426ad72d849774ffcd4a6c5985b","modified":1591282736210},{"_id":"themes/ascent/sample.png","hash":"3886e11ef6168c34f788d0f4e66958fbf21ae95c","modified":1591282736231},{"_id":"themes/ascent/languages/default.yml","hash":"1db9e4e01cd7cf934bc7f672857917a3ccac213e","modified":1591282736215},{"_id":"themes/ascent/layout/archive.ejs","hash":"3393cdbd0def98d749c7a786441d1c40e3106929","modified":1591282736223},{"_id":"themes/ascent/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1591282736225},{"_id":"themes/ascent/layout/category.ejs","hash":"a42381a1635bfeb829a97eafb0e2dd3891eb971b","modified":1591282736225},{"_id":"themes/ascent/layout/page.ejs","hash":"a05fd1a27e1c54c9dbab9e69a257a299b0f549cc","modified":1591282736227},{"_id":"themes/ascent/layout/post.ejs","hash":"a05fd1a27e1c54c9dbab9e69a257a299b0f549cc","modified":1591282736228},{"_id":"themes/ascent/layout/tag.ejs","hash":"33ed379fe4bda07fe3119bf87b7919112f9b88d5","modified":1591282736229},{"_id":"themes/ascent/layout/layout.ejs","hash":"b8b9fa56b2ec3c28ebc7e61856db8787f0dacbb2","modified":1591282736226},{"_id":"themes/ascent/layout/_partial/archive.ejs","hash":"43feaca925fa841295a9f01bbd3b2283456fee7b","modified":1591282736217},{"_id":"themes/ascent/layout/_partial/article.ejs","hash":"3eb6bdd97a5af4eea4d181a4ba920d4f5a933499","modified":1591282736218},{"_id":"themes/ascent/layout/_partial/footer.ejs","hash":"a67481ec9bc4f5b5476bcb7252c28d5fb53ef3c0","modified":1591282736218},{"_id":"themes/ascent/layout/_partial/head.ejs","hash":"5ace1f9a74f2954b368aceeeabfe4882ec1b7eb6","modified":1591282736219},{"_id":"themes/ascent/layout/_partial/header.ejs","hash":"c1d0e16955e58c3e8a90266c681c61a2b4447327","modified":1591282736220},{"_id":"themes/ascent/layout/_partial/archive-post.ejs","hash":"0798df427f02946a3462c50c47b18cffb31cfc1a","modified":1591282736217},{"_id":"themes/ascent/source/css/highlight.css","hash":"d661127c6a4d3203565983ea01c6ff5018fa47c7","modified":1591282736233},{"_id":"themes/ascent/source/css/comments.css","hash":"f8334a5bf865e83c172e4f883cd1993cbe8882c7","modified":1591282736232},{"_id":"themes/ascent/source/css/style.css","hash":"8b590a8fc228a6cab4118dac56d2b1334c6b6fee","modified":1591282736233},{"_id":"themes/ascent/layout/_partial/post/nav.ejs","hash":"d496a42df6a8e2e8623ac0ae00dfecb24aac4890","modified":1591282736221},{"_id":"themes/ascent/layout/_partial/post/date.ejs","hash":"69dc6381e218e6de736b4c875a5ff129dd1a4f21","modified":1591282736220},{"_id":"themes/ascent/layout/_partial/post/title.ejs","hash":"3da8ecec6a2dec2c9ed8c5bfb2ba6f88be3f3510","modified":1591282736222},{"_id":"themes/polarbear/LICENSE","hash":"6fd796a4c624297885ceed920ac7130a96f29a85","modified":1591285149705},{"_id":"themes/polarbear/README.md","hash":"0e40f3989a2c3799849af6e731a2ff85f7a7e79b","modified":1591285149706},{"_id":"themes/polarbear/_config.yml","hash":"35859d95079de61d29a1132b8448ebe9b23fade3","modified":1591285149707},{"_id":"themes/polarbear/languages/default.yml","hash":"5687525dd72a436ce0970f0b844dc7251069400a","modified":1591285149707},{"_id":"themes/polarbear/languages/en.yml","hash":"5687525dd72a436ce0970f0b844dc7251069400a","modified":1591285149708},{"_id":"themes/polarbear/languages/zh-cn.yml","hash":"be347d8f215c1d36a7a906143b1411e5aaf5d500","modified":1591285149708},{"_id":"themes/polarbear/layout/_layout.swig","hash":"cf06c526bd17080b58b61601bc7daf83bd67afa1","modified":1591285149709},{"_id":"themes/polarbear/layout/categories.swig","hash":"21987803e162bd9383502d9de07d5d531b78cb53","modified":1591285149731},{"_id":"themes/polarbear/layout/archive.swig","hash":"600c71de731ac0ac8c281c3c9df1d7e9b62d2a9d","modified":1591285149731},{"_id":"themes/polarbear/layout/index.swig","hash":"5c1dce2ea06d8de6f05f92f95cb1449cefc846bc","modified":1591285149732},{"_id":"themes/polarbear/layout/page.swig","hash":"a168c6e1dcf21af6408a713f8512b77de0dc60f3","modified":1591285149732},{"_id":"themes/polarbear/layout/post.swig","hash":"f7a8b96953374694c50d131b1b760fd84b2d2d51","modified":1591285149733},{"_id":"themes/polarbear/source/favicon.ico","hash":"933a804f4cf7a82e2039f340fe6bc3d5f413938e","modified":1591361631396},{"_id":"themes/polarbear/layout/_script/analytics.swig","hash":"24ba4a8adcaf09c9ede76405ee732385595d8e39","modified":1591285149727},{"_id":"themes/polarbear/layout/_script/comments.swig","hash":"256713e117d67e2caad21db52bc0d51460e4ff7e","modified":1591285149728},{"_id":"themes/polarbear/layout/_script/config.swig","hash":"4532063827e51b5c0dc3f58ca8c37896959887ac","modified":1591285149728},{"_id":"themes/polarbear/layout/_script/libs.swig","hash":"615f82ddd2f89e87a604b51773fd719c78f90580","modified":1591285149729},{"_id":"themes/polarbear/layout/_script/theme.swig","hash":"44582de16d91f5cde5fa28a21db408385a46ff8e","modified":1591285149730},{"_id":"themes/polarbear/layout/_macro/archive.swig","hash":"0f298085c0a1c556b41a5785e9fb3f2cacf01e34","modified":1591285149709},{"_id":"themes/polarbear/layout/_macro/post.swig","hash":"bff84f71578e00ba349f55f11fdece1be776fd6d","modified":1591285149709},{"_id":"themes/polarbear/layout/_partial/comments.swig","hash":"9ba815734a4d807859f0aeafd5536b2d35d26074","modified":1591285149716},{"_id":"themes/polarbear/layout/_partial/footer.swig","hash":"4b88f30ad6218c87d27bc5c5b37bbbd97732cf59","modified":1591285149718},{"_id":"themes/polarbear/layout/_partial/head.swig","hash":"44c45d90d9a3db3401f6aa219cd26f38cdd0960b","modified":1591285149718},{"_id":"themes/polarbear/layout/_partial/header.swig","hash":"2e7d1faf49dadbf87b5925ff8da643cb470d6199","modified":1591285149718},{"_id":"themes/polarbear/layout/_partial/pagination.swig","hash":"3843e523b9a7a1c5973d0c2de05cc88467733e09","modified":1591285149719},{"_id":"themes/polarbear/layout/_partial/widget.swig","hash":"d8181794388ef3baa26c2d5cf8d71ae05472b32e","modified":1591285149719},{"_id":"themes/polarbear/source/css/_base.scss","hash":"27c36dfe4b2d159c64e666bfe8561fbdc591e6a5","modified":1591285149735},{"_id":"themes/polarbear/source/css/_layout.scss","hash":"adfe6b08a183326e2115974860d1862288d4789c","modified":1591285149738},{"_id":"themes/polarbear/source/css/_variables.scss","hash":"5f2e9eea2dd5c3886b9f84feace4ddfb73c04ddc","modified":1591285149760},{"_id":"themes/polarbear/source/css/style.scss","hash":"2f1d29a63c3c8f8c615049b0233db528b6ab3230","modified":1591285149760},{"_id":"themes/polarbear/layout/_script/_analytics/baidu-analytics.swig","hash":"707864f34f7750a438817acef927f1e4075c5cf8","modified":1591285149720},{"_id":"themes/polarbear/layout/_script/_analytics/google-analytics.swig","hash":"5143d9e510bfd98723a009780ba23aebade21b29","modified":1591285149721},{"_id":"themes/polarbear/layout/_script/_comments/disqus.swig","hash":"f0e8b2ff1556622c0dee10a82e77646695b0f8dd","modified":1591285149724},{"_id":"themes/polarbear/layout/_script/_comments/duoshou.swig","hash":"582cf94bc12b56c6a16b5f3aa0067b51f74b0d40","modified":1591285149727},{"_id":"themes/polarbear/layout/_partial/_head/meta.swig","hash":"5eef6defbaf10f3f6d3b341d2d1af2e4d7aeb5a9","modified":1591285149710},{"_id":"themes/polarbear/layout/_partial/_widget/categories.swig","hash":"8bb8094fd3d96c0dd7e58fd658384a5df3a7e2ec","modified":1591285149711},{"_id":"themes/polarbear/layout/_partial/_widget/tags.swig","hash":"a14e2bda31b15cac11c29d0abb623543a6c87edc","modified":1591285149715},{"_id":"themes/polarbear/layout/_partial/_widget/custom.swig","hash":"3fd8e37b94982927fdd0eaa1f658ada660f23b9c","modified":1591285149714},{"_id":"themes/polarbear/source/css/_custom/_custom.scss","hash":"d0873cd8554d515282a6792fcc3f5bd4a256b7a6","modified":1591285149738},{"_id":"themes/polarbear/source/css/_common/_animation.scss","hash":"725af3ea621de186d6d61749836d5b491a96c1e4","modified":1591285149736},{"_id":"themes/polarbear/source/css/_common/_normalize.scss","hash":"259a1a0584f43efa6de2573a45fedfd59d4f39c0","modified":1591285149737},{"_id":"themes/polarbear/source/css/_partial/_archive.scss","hash":"d4fa3756a4cab145f76fccc3c69d81b3412cec36","modified":1591285149739},{"_id":"themes/polarbear/source/css/_common/_utils.scss","hash":"7719505ff3185a9f8fad05fe092fa91dd63d900c","modified":1591285149738},{"_id":"themes/polarbear/source/css/_partial/_back-to-top.scss","hash":"c6f586ac04a9a0f3633dadf5c66be9e0c4027f1d","modified":1591285149739},{"_id":"themes/polarbear/source/css/_partial/_categories.scss","hash":"eb9fa27704fa280c6e8cc7b7f44b283cd2fe4ad3","modified":1591285149740},{"_id":"themes/polarbear/source/css/_partial/_footer.scss","hash":"5d708caa8a96f84642404fe8a0d7a755092710db","modified":1591285149743},{"_id":"themes/polarbear/source/css/_partial/_header.scss","hash":"b4e97e6704ab530ec3b789866d689b736e36de9e","modified":1591285149746},{"_id":"themes/polarbear/source/css/_partial/_iconfont.scss","hash":"ae9d1019bdbe6de4fe97aabbd42f489039e978a0","modified":1591285149750},{"_id":"themes/polarbear/source/css/_partial/_pagination.scss","hash":"7362208b41453429adae449acc916f8633077248","modified":1591285149752},{"_id":"themes/polarbear/source/css/_partial/_post.scss","hash":"71bfa582c26c491c8791dadbc3cb135284a123a2","modified":1591285149756},{"_id":"themes/polarbear/source/css/_partial/_tags.scss","hash":"1928c8483f51035edccd6899d7f4ee06673f2804","modified":1591285149759},{"_id":"themes/polarbear/source/css/_partial/_widget.scss","hash":"2fcea4e8e43b79c73bf4bd6dbf0c1a2368d4c6ef","modified":1591285149759},{"_id":"themes/polarbear/source/lib/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1591285149762},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1591285149763},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1591285149765},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1591285149766},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1591285149766},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1591285149767},{"_id":"themes/polarbear/source/lib/fancybox/jquery.fancybox.css","hash":"79df8b1839cbcb82a0fd9738289eb43c1bc77026","modified":1591285149769},{"_id":"themes/polarbear/source/lib/fancybox/jquery.fancybox.js","hash":"39357ff994e53ea15c582b6106094396835a8be0","modified":1591285149770},{"_id":"themes/polarbear/source/lib/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1591285149772},{"_id":"themes/polarbear/source/js/src/bootstrap.js","hash":"edb8690492039f4a4c9b83a3b9abda6d8a214984","modified":1591285149761},{"_id":"themes/polarbear/source/js/src/theme.js","hash":"6b76d3006694d56c843b8f968f224985a3fcce4e","modified":1591285149762},{"_id":"themes/polarbear/source/lib/jquery/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1591285149775},{"_id":"themes/polarbear/source/css/_partial/_post/_code.scss","hash":"446dbbc70ba45e41079e2954549c248f5affc7c0","modified":1591285149757},{"_id":"themes/polarbear/source/css/_partial/_post/_content.scss","hash":"899c7c25bfa4fe00d85734af0d71bc4caf2a7337","modified":1591285149758},{"_id":"themes/polarbear/source/css/_partial/_post/_header.scss","hash":"ceca6f4b00154542c57bc6fe451e01892a9338d2","modified":1591285149758},{"_id":"themes/polarbear/source/css/_partial/_post/_footer.scss","hash":"d4c0fc62e69412304691d58984fec0aa963e1117","modified":1591285149758},{"_id":"themes/polarbear/source/lib/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1591285149767},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1591285149768},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1591285149768},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1591285149768},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1591285149769},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1591285149769},{"_id":"public/lib/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1591466739928},{"_id":"public/favicon.ico","hash":"933a804f4cf7a82e2039f340fe6bc3d5f413938e","modified":1591466739928},{"_id":"public/lib/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1591466739928},{"_id":"public/lib/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1591466739928},{"_id":"public/lib/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1591466739928},{"_id":"public/lib/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1591466739928},{"_id":"public/lib/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1591466739928},{"_id":"public/lib/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1591466739928},{"_id":"public/css/comments.css","hash":"f8334a5bf865e83c172e4f883cd1993cbe8882c7","modified":1591466739928},{"_id":"public/css/highlight.css","hash":"d661127c6a4d3203565983ea01c6ff5018fa47c7","modified":1591466739928},{"_id":"public/js/src/bootstrap.js","hash":"edb8690492039f4a4c9b83a3b9abda6d8a214984","modified":1591466739928},{"_id":"public/lib/fancybox/jquery.fancybox.css","hash":"79df8b1839cbcb82a0fd9738289eb43c1bc77026","modified":1591466739928},{"_id":"public/js/src/theme.js","hash":"6b76d3006694d56c843b8f968f224985a3fcce4e","modified":1591466739928},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1591466739928},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1591466739928},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1591466739928},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1591466739928},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1591466739928},{"_id":"public/lib/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1591466739928},{"_id":"public/lib/fancybox/jquery.fancybox.js","hash":"39357ff994e53ea15c582b6106094396835a8be0","modified":1591466739928},{"_id":"public/lib/jquery/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1591466739928},{"_id":"source/_posts/Python的交互式.md","hash":"26ce095f21e2b4d6b9c6fa35bb9ccd3a0b8a30f3","modified":1696691201314},{"_id":"source/_posts/Swift-REPL模式介绍.md","hash":"2313de2641d36c520e7032a55fe3e8728904d142","modified":1696691201314},{"_id":"public/2020/02/07/Swift-REPL模式介绍/index.html","hash":"955f1cc155b45cb97ed00f5503b3089f31a5a871","modified":1696694392189},{"_id":"public/2020/02/12/Python的交互式/index.html","hash":"b775c215626156ed7fdcd19de8f0d2d355cca60b","modified":1696694392189},{"_id":"source/_posts/Types-and-Programming-Languages-1.md","hash":"823a417f5f2f3e738ca5afa41555911b904f0eae","modified":1604591715486},{"_id":"source/_posts/Garbage-Collection-based-on-LLVM.md","hash":"a72672b1de081ac45fe3d480208e0ffb50ef4550","modified":1605274002134},{"_id":"source/.DS_Store","hash":"4d369ef3e195120e32159c0a5bd032b13a1229cf","modified":1607235296978},{"_id":"source/_posts/30-Years-Later-QBasic-Is-Still-The-Best-译文.md","hash":"6189197745ebe056c391ed13332dccbdbd20449a","modified":1607882696565},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1607235351717},{"_id":"source/CNAME","hash":"8239e12a5c27b26194d9be95c1ca8becd5e38f73","modified":1696688835304},{"_id":"public/2020/12/02/30-Years-Later-QBasic-Is-Still-The-Best-译文/index.html","hash":"2c9271258dd4fd413c2780074ae2ee09934e2cd7","modified":1696688954779},{"_id":"public/2020/10/28/Garbage-Collection-based-on-LLVM/index.html","hash":"cfcb8b3491f5bd377880e3a269d414a7c958edc4","modified":1696688954779},{"_id":"public/archives/2020/10/index.html","hash":"ab142e3ac3c858b713942fe8d6edb349a69674c3","modified":1696688954779},{"_id":"public/archives/2020/12/index.html","hash":"9a6bc167c5232b0aec326dd486ccfc0741071ba7","modified":1696688954779},{"_id":"public/tags/Garbage-Collection/index.html","hash":"ab142e3ac3c858b713942fe8d6edb349a69674c3","modified":1696688954779},{"_id":"public/tags/LLVM/index.html","hash":"ab142e3ac3c858b713942fe8d6edb349a69674c3","modified":1696688954779},{"_id":"public/CNAME","hash":"8239e12a5c27b26194d9be95c1ca8becd5e38f73","modified":1696688954779}],"Category":[],"Data":[],"Page":[{"title":"Ops, you got a 404 surprise!","layout":"404","description":"May the Force be with you :&#41;","_content":"\n","source":"404.md","raw":"---\ntitle: Ops, you got a 404 surprise!\nlayout: 404\ndescription: \"May the Force be with you :&#41;\"\n---\n\n","date":"2020-01-30T06:26:03.236Z","updated":"2020-01-30T06:26:03.236Z","path":"404.html","comments":1,"_id":"ck6i3kmky0000fjpogg40ekq3","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"About Me","date":"2020-01-29T16:43:30.000Z","layout":"about","_content":"\nI'm a member of a language design and develop team recently.\n\nI'm interested in *Programming Language* and *Compiler*, and enjoy sharing. Suggestions and comments are very welcome, please contact me through email.\n\n---\n\nTo do list for this site:\n\n* [ ] add comment system\n* [ ] feel a little bit uncomfortable for the base64 encoded URL shown at the end of the post when the title of blog is in chinese","source":"about/index.md","raw":"---\ntitle: About Me\ndate: 2020-01-30 00:43:30\nlayout: about\n---\n\nI'm a member of a language design and develop team recently.\n\nI'm interested in *Programming Language* and *Compiler*, and enjoy sharing. Suggestions and comments are very welcome, please contact me through email.\n\n---\n\nTo do list for this site:\n\n* [ ] add comment system\n* [ ] feel a little bit uncomfortable for the base64 encoded URL shown at the end of the post when the title of blog is in chinese","updated":"2023-10-07T14:23:08.212Z","path":"about/index.html","_id":"ck6i3kmm20002fjpo7eik581u","comments":1,"content":"<p>I’m a member of a language design and develop team recently.</p>\n<p>I’m interested in <em>Programming Language</em> and <em>Compiler</em>, and enjoy sharing. Suggestions and comments are very welcome, please contact me through email.</p>\n<hr>\n<p>To do list for this site:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> add comment system</li>\n<li><input disabled=\"\" type=\"checkbox\"> feel a little bit uncomfortable for the base64 encoded URL shown at the end of the post when the title of blog is in chinese</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>I’m a member of a language design and develop team recently.</p>\n<p>I’m interested in <em>Programming Language</em> and <em>Compiler</em>, and enjoy sharing. Suggestions and comments are very welcome, please contact me through email.</p>\n<hr>\n<p>To do list for this site:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> add comment system</li>\n<li><input disabled=\"\" type=\"checkbox\"> feel a little bit uncomfortable for the base64 encoded URL shown at the end of the post when the title of blog is in chinese</li>\n</ul>\n"}],"Post":[{"title":"基于Hexo和github page搭建个人博客","date":"2020-01-29T11:46:47.000Z","_content":"\n倒腾过好几次个人主页，但个人原创文章并不多，总是要么在换模板的路上，要不就是在换框架的路上，终于乐此而疲了。这次换个人主页之后还是要静下心来多写文章才是。这篇文章用于答谢Hexo和Archer主题的作者，hexo是到目前为止用过的最好用的博客框架，archer主题模板是目前个人比较喜欢的一款模版。\n\n废话不多说，按照个人习惯，分四段简单介绍下如何基于Hexo和Github Page搭建个人主页。\n\n> 本文不严格区分*nix系统和windows系统，所有命令均可在terminal或者gitbash中执行。\n\n## 0x00 准备\n\nhexo是一个静态站点生成工具，集创建（初始化站点）、开发（指的是写博客）、发布博客文章功能于一体，十分方便。\n\n搭建博客站点先准备以下平台的账号和开发环境：\n\n- 注册github账户，[链接](https://github.com/)\n\n- 安装git，并在github账户中配置sshkey：*nix系统一般自带git，windows系统安装gitbash，[下载地址](https://gitforwindows.org/)\n\n- 配置sshkey：\n\n  - 生成sshkey：*nix系统中打开terminal，windows系统中打开gitbash，参考[教程](https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh)，执行以下命令，\n\n    ```bash\n    cd ~ && ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" # your_email@example.com替换为你注册github的邮箱，可以一直按回车生成默认的文件名，方便阅读后续的步骤\n    ```\n\n  - 执行以下命令，拷贝出你的public key，将屏幕中输出的公钥内容`ctrl+c`进行拷贝：\n\n    ```bash\n    cd ~/.ssh/ && cat id_rsa.pub # 这里的id_rsa.pub为上一步生成的密钥对中的公钥\n    ```\n\n  - 打开github中配置sshkey的界面，[链接](https://github.com/settings/keys)，选择`New SSH key`，把拷贝的公钥配置上去即可。\n\n- 安装Nodejs，[下载地址](https://nodejs.org/zh-cn/)，安装成功后会同时安装好node和npm两个工具，并为npm配置国内源，例如配置淘宝源可以执行下述命令：\n\n  ```bash\n  npm config set registry https://registry.npm.taobao.org\n  ```\n\n- 安装hexo，执行下述命令\n\n  ```bash\n  npm install hexo-cli -g # install hexo\n  hexo -v # check whether successfully installed\n  ```\n\n## 0x01 初始化站点\n\n执行以下命令来初始化博客站点，会创建一个新的目录，以blog-dev为例，执行：\n\n```bash\nhexo init blog-dev\n```\n\n待命令执行完毕，会新建一个blog-dev目录，进入该目录中，我们可以看到以下目录树：\n\n```bash\nblog-dev\n├── _config.yml        #---------------- 站点配置文件\n├── node_modules       #---------------- npm安装包本地保存目录\n├── package-lock.json\n├── package.json       #---------------- 依赖包配置文件\n├── scaffolds\n├── source             #---------------- 博客文章保存目录\n└── themes             #---------------- 博客主题保存目录\n```\n\n此时，进入到blog-dev目录，可以执行hexo的相关参数及命令，可以进行站点的管理，简单介绍如下：\n\n```bash\nhexo clean # 清除缓存\nhexo generate # 生成网站静态文件\nhexo server # 启动本地调试模式，默认可以打开localhost:4000查看网站效果\nhexo deploy # 发布到GitHub Page，第0x11节会具体介绍\n```\n\nhexo还有一个非常方便的点是主题套用十分方便，将想要的模板下载下来，放到themes目录下，然后修改_config.yml文件中的theme字段，改为下载下来的主题目录名即可。主题可以在[官方网站下载](https://hexo.io/themes/)，也可以自行从各种渠道获取。\n\n## 0x10 创建github page\n\n本节内容大家应该都比较熟悉，创建作为个人主页用的github page，必须将仓名命名为username.github.com，经过测试，仓名中的username与你的github账号名可以不区分大小写。\n\n这部分教程我想偷懒跳过了，可以自行查看[官方教程](https://pages.github.com/)。\n\n## 0x11 预览和发布\n\n在blog-dev目录下执行`hexo new '博客标题'`即可创建一篇新的博客，使用markdown语法进行编辑。\n\n编辑完毕之后，执行下述命令，可以启动一个本地的临时服务器进行预览：\n\n```bash\nhexo server # 启动本地预览服务\n```\n\n在浏览器中打开`localhost:4000`，即可预览你的博客。\n\n配置blog-dev的发布路径，编辑blog-dev/_config.yml文件，一般在文件末尾，有一个deploy字段，把第三节创建的github page仓库路径配置上去即可，如果deploy字段下只有一个type，则手动添加其他字段（注意yml文件遵从yaml格式缩紧）。例如我的配置就是：\n\n```yaml\ndeploy:                                                                                                          \n  type: git\n  repo: https://github.com/ChinoMars/chinomars.github.io.git\n  branch: master\n```\n\n依次执行下述命令，即可发布你的静态站点：\n\n```bash\nhexo clean # 清除缓存\nhexo generate # 生成站点的静态文件\nhexo deploy # 自动push到github page所在的master分支，进行发布\n```\n\n最后，可以打开网址：`https://username.github.io`即可查看个人的站点。","source":"_posts/基于Hexo和github-page搭建个人博客.md","raw":"---\ntitle: 基于Hexo和github page搭建个人博客\ndate: 2020-01-29 19:46:47\ntags: 小白\n---\n\n倒腾过好几次个人主页，但个人原创文章并不多，总是要么在换模板的路上，要不就是在换框架的路上，终于乐此而疲了。这次换个人主页之后还是要静下心来多写文章才是。这篇文章用于答谢Hexo和Archer主题的作者，hexo是到目前为止用过的最好用的博客框架，archer主题模板是目前个人比较喜欢的一款模版。\n\n废话不多说，按照个人习惯，分四段简单介绍下如何基于Hexo和Github Page搭建个人主页。\n\n> 本文不严格区分*nix系统和windows系统，所有命令均可在terminal或者gitbash中执行。\n\n## 0x00 准备\n\nhexo是一个静态站点生成工具，集创建（初始化站点）、开发（指的是写博客）、发布博客文章功能于一体，十分方便。\n\n搭建博客站点先准备以下平台的账号和开发环境：\n\n- 注册github账户，[链接](https://github.com/)\n\n- 安装git，并在github账户中配置sshkey：*nix系统一般自带git，windows系统安装gitbash，[下载地址](https://gitforwindows.org/)\n\n- 配置sshkey：\n\n  - 生成sshkey：*nix系统中打开terminal，windows系统中打开gitbash，参考[教程](https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh)，执行以下命令，\n\n    ```bash\n    cd ~ && ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" # your_email@example.com替换为你注册github的邮箱，可以一直按回车生成默认的文件名，方便阅读后续的步骤\n    ```\n\n  - 执行以下命令，拷贝出你的public key，将屏幕中输出的公钥内容`ctrl+c`进行拷贝：\n\n    ```bash\n    cd ~/.ssh/ && cat id_rsa.pub # 这里的id_rsa.pub为上一步生成的密钥对中的公钥\n    ```\n\n  - 打开github中配置sshkey的界面，[链接](https://github.com/settings/keys)，选择`New SSH key`，把拷贝的公钥配置上去即可。\n\n- 安装Nodejs，[下载地址](https://nodejs.org/zh-cn/)，安装成功后会同时安装好node和npm两个工具，并为npm配置国内源，例如配置淘宝源可以执行下述命令：\n\n  ```bash\n  npm config set registry https://registry.npm.taobao.org\n  ```\n\n- 安装hexo，执行下述命令\n\n  ```bash\n  npm install hexo-cli -g # install hexo\n  hexo -v # check whether successfully installed\n  ```\n\n## 0x01 初始化站点\n\n执行以下命令来初始化博客站点，会创建一个新的目录，以blog-dev为例，执行：\n\n```bash\nhexo init blog-dev\n```\n\n待命令执行完毕，会新建一个blog-dev目录，进入该目录中，我们可以看到以下目录树：\n\n```bash\nblog-dev\n├── _config.yml        #---------------- 站点配置文件\n├── node_modules       #---------------- npm安装包本地保存目录\n├── package-lock.json\n├── package.json       #---------------- 依赖包配置文件\n├── scaffolds\n├── source             #---------------- 博客文章保存目录\n└── themes             #---------------- 博客主题保存目录\n```\n\n此时，进入到blog-dev目录，可以执行hexo的相关参数及命令，可以进行站点的管理，简单介绍如下：\n\n```bash\nhexo clean # 清除缓存\nhexo generate # 生成网站静态文件\nhexo server # 启动本地调试模式，默认可以打开localhost:4000查看网站效果\nhexo deploy # 发布到GitHub Page，第0x11节会具体介绍\n```\n\nhexo还有一个非常方便的点是主题套用十分方便，将想要的模板下载下来，放到themes目录下，然后修改_config.yml文件中的theme字段，改为下载下来的主题目录名即可。主题可以在[官方网站下载](https://hexo.io/themes/)，也可以自行从各种渠道获取。\n\n## 0x10 创建github page\n\n本节内容大家应该都比较熟悉，创建作为个人主页用的github page，必须将仓名命名为username.github.com，经过测试，仓名中的username与你的github账号名可以不区分大小写。\n\n这部分教程我想偷懒跳过了，可以自行查看[官方教程](https://pages.github.com/)。\n\n## 0x11 预览和发布\n\n在blog-dev目录下执行`hexo new '博客标题'`即可创建一篇新的博客，使用markdown语法进行编辑。\n\n编辑完毕之后，执行下述命令，可以启动一个本地的临时服务器进行预览：\n\n```bash\nhexo server # 启动本地预览服务\n```\n\n在浏览器中打开`localhost:4000`，即可预览你的博客。\n\n配置blog-dev的发布路径，编辑blog-dev/_config.yml文件，一般在文件末尾，有一个deploy字段，把第三节创建的github page仓库路径配置上去即可，如果deploy字段下只有一个type，则手动添加其他字段（注意yml文件遵从yaml格式缩紧）。例如我的配置就是：\n\n```yaml\ndeploy:                                                                                                          \n  type: git\n  repo: https://github.com/ChinoMars/chinomars.github.io.git\n  branch: master\n```\n\n依次执行下述命令，即可发布你的静态站点：\n\n```bash\nhexo clean # 清除缓存\nhexo generate # 生成站点的静态文件\nhexo deploy # 自动push到github page所在的master分支，进行发布\n```\n\n最后，可以打开网址：`https://username.github.io`即可查看个人的站点。","slug":"基于Hexo和github-page搭建个人博客","published":1,"updated":"2020-01-30T06:26:03.234Z","_id":"ck6i3kmm60005fjpohqnvbls2","comments":1,"layout":"post","photos":[],"link":"","content":"<p>倒腾过好几次个人主页，但个人原创文章并不多，总是要么在换模板的路上，要不就是在换框架的路上，终于乐此而疲了。这次换个人主页之后还是要静下心来多写文章才是。这篇文章用于答谢Hexo和Archer主题的作者，hexo是到目前为止用过的最好用的博客框架，archer主题模板是目前个人比较喜欢的一款模版。</p>\n<p>废话不多说，按照个人习惯，分四段简单介绍下如何基于Hexo和Github Page搭建个人主页。</p>\n<blockquote>\n<p>本文不严格区分*nix系统和windows系统，所有命令均可在terminal或者gitbash中执行。</p>\n</blockquote>\n<h2 id=\"0x00-准备\"><a href=\"#0x00-准备\" class=\"headerlink\" title=\"0x00 准备\"></a>0x00 准备</h2><p>hexo是一个静态站点生成工具，集创建（初始化站点）、开发（指的是写博客）、发布博客文章功能于一体，十分方便。</p>\n<p>搭建博客站点先准备以下平台的账号和开发环境：</p>\n<ul>\n<li><p>注册github账户，<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n</li>\n<li><p>安装git，并在github账户中配置sshkey：*nix系统一般自带git，windows系统安装gitbash，<a href=\"https://gitforwindows.org/\" target=\"_blank\" rel=\"noopener\">下载地址</a></p>\n</li>\n<li><p>配置sshkey：</p>\n<ul>\n<li><p>生成sshkey：*nix系统中打开terminal，windows系统中打开gitbash，参考<a href=\"https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh\" target=\"_blank\" rel=\"noopener\">教程</a>，执行以下命令，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~ &amp;&amp; ssh-keygen -t rsa -b 4096 -C <span class=\"string\">\"your_email@example.com\"</span> <span class=\"comment\"># your_email@example.com替换为你注册github的邮箱，可以一直按回车生成默认的文件名，方便阅读后续的步骤</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行以下命令，拷贝出你的public key，将屏幕中输出的公钥内容<code>ctrl+c</code>进行拷贝：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/.ssh/ &amp;&amp; cat id_rsa.pub <span class=\"comment\"># 这里的id_rsa.pub为上一步生成的密钥对中的公钥</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打开github中配置sshkey的界面，<a href=\"https://github.com/settings/keys\" target=\"_blank\" rel=\"noopener\">链接</a>，选择<code>New SSH key</code>，把拷贝的公钥配置上去即可。</p>\n</li>\n</ul>\n</li>\n<li><p>安装Nodejs，<a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">下载地址</a>，安装成功后会同时安装好node和npm两个工具，并为npm配置国内源，例如配置淘宝源可以执行下述命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装hexo，执行下述命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g <span class=\"comment\"># install hexo</span></span><br><span class=\"line\">hexo -v <span class=\"comment\"># check whether successfully installed</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"0x01-初始化站点\"><a href=\"#0x01-初始化站点\" class=\"headerlink\" title=\"0x01 初始化站点\"></a>0x01 初始化站点</h2><p>执行以下命令来初始化博客站点，会创建一个新的目录，以blog-dev为例，执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init blog-dev</span><br></pre></td></tr></table></figure>\n\n<p>待命令执行完毕，会新建一个blog-dev目录，进入该目录中，我们可以看到以下目录树：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blog-dev</span><br><span class=\"line\">├── _config.yml        <span class=\"comment\">#---------------- 站点配置文件</span></span><br><span class=\"line\">├── node_modules       <span class=\"comment\">#---------------- npm安装包本地保存目录</span></span><br><span class=\"line\">├── package-lock.json</span><br><span class=\"line\">├── package.json       <span class=\"comment\">#---------------- 依赖包配置文件</span></span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── <span class=\"built_in\">source</span>             <span class=\"comment\">#---------------- 博客文章保存目录</span></span><br><span class=\"line\">└── themes             <span class=\"comment\">#---------------- 博客主题保存目录</span></span><br></pre></td></tr></table></figure>\n\n<p>此时，进入到blog-dev目录，可以执行hexo的相关参数及命令，可以进行站点的管理，简单介绍如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean <span class=\"comment\"># 清除缓存</span></span><br><span class=\"line\">hexo generate <span class=\"comment\"># 生成网站静态文件</span></span><br><span class=\"line\">hexo server <span class=\"comment\"># 启动本地调试模式，默认可以打开localhost:4000查看网站效果</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\"># 发布到GitHub Page，第0x11节会具体介绍</span></span><br></pre></td></tr></table></figure>\n\n<p>hexo还有一个非常方便的点是主题套用十分方便，将想要的模板下载下来，放到themes目录下，然后修改_config.yml文件中的theme字段，改为下载下来的主题目录名即可。主题可以在<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">官方网站下载</a>，也可以自行从各种渠道获取。</p>\n<h2 id=\"0x10-创建github-page\"><a href=\"#0x10-创建github-page\" class=\"headerlink\" title=\"0x10 创建github page\"></a>0x10 创建github page</h2><p>本节内容大家应该都比较熟悉，创建作为个人主页用的github page，必须将仓名命名为username.github.com，经过测试，仓名中的username与你的github账号名可以不区分大小写。</p>\n<p>这部分教程我想偷懒跳过了，可以自行查看<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">官方教程</a>。</p>\n<h2 id=\"0x11-预览和发布\"><a href=\"#0x11-预览和发布\" class=\"headerlink\" title=\"0x11 预览和发布\"></a>0x11 预览和发布</h2><p>在blog-dev目录下执行<code>hexo new &#39;博客标题&#39;</code>即可创建一篇新的博客，使用markdown语法进行编辑。</p>\n<p>编辑完毕之后，执行下述命令，可以启动一个本地的临时服务器进行预览：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server <span class=\"comment\"># 启动本地预览服务</span></span><br></pre></td></tr></table></figure>\n\n<p>在浏览器中打开<code>localhost:4000</code>，即可预览你的博客。</p>\n<p>配置blog-dev的发布路径，编辑blog-dev/_config.yml文件，一般在文件末尾，有一个deploy字段，把第三节创建的github page仓库路径配置上去即可，如果deploy字段下只有一个type，则手动添加其他字段（注意yml文件遵从yaml格式缩紧）。例如我的配置就是：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span>                                                                                                          </span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/ChinoMars/chinomars.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n<p>依次执行下述命令，即可发布你的静态站点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean <span class=\"comment\"># 清除缓存</span></span><br><span class=\"line\">hexo generate <span class=\"comment\"># 生成站点的静态文件</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\"># 自动push到github page所在的master分支，进行发布</span></span><br></pre></td></tr></table></figure>\n\n<p>最后，可以打开网址：<code>https://username.github.io</code>即可查看个人的站点。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>倒腾过好几次个人主页，但个人原创文章并不多，总是要么在换模板的路上，要不就是在换框架的路上，终于乐此而疲了。这次换个人主页之后还是要静下心来多写文章才是。这篇文章用于答谢Hexo和Archer主题的作者，hexo是到目前为止用过的最好用的博客框架，archer主题模板是目前个人比较喜欢的一款模版。</p>\n<p>废话不多说，按照个人习惯，分四段简单介绍下如何基于Hexo和Github Page搭建个人主页。</p>\n<blockquote>\n<p>本文不严格区分*nix系统和windows系统，所有命令均可在terminal或者gitbash中执行。</p>\n</blockquote>\n<h2 id=\"0x00-准备\"><a href=\"#0x00-准备\" class=\"headerlink\" title=\"0x00 准备\"></a>0x00 准备</h2><p>hexo是一个静态站点生成工具，集创建（初始化站点）、开发（指的是写博客）、发布博客文章功能于一体，十分方便。</p>\n<p>搭建博客站点先准备以下平台的账号和开发环境：</p>\n<ul>\n<li><p>注册github账户，<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n</li>\n<li><p>安装git，并在github账户中配置sshkey：*nix系统一般自带git，windows系统安装gitbash，<a href=\"https://gitforwindows.org/\" target=\"_blank\" rel=\"noopener\">下载地址</a></p>\n</li>\n<li><p>配置sshkey：</p>\n<ul>\n<li><p>生成sshkey：*nix系统中打开terminal，windows系统中打开gitbash，参考<a href=\"https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh\" target=\"_blank\" rel=\"noopener\">教程</a>，执行以下命令，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~ &amp;&amp; ssh-keygen -t rsa -b 4096 -C <span class=\"string\">\"your_email@example.com\"</span> <span class=\"comment\"># your_email@example.com替换为你注册github的邮箱，可以一直按回车生成默认的文件名，方便阅读后续的步骤</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行以下命令，拷贝出你的public key，将屏幕中输出的公钥内容<code>ctrl+c</code>进行拷贝：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/.ssh/ &amp;&amp; cat id_rsa.pub <span class=\"comment\"># 这里的id_rsa.pub为上一步生成的密钥对中的公钥</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打开github中配置sshkey的界面，<a href=\"https://github.com/settings/keys\" target=\"_blank\" rel=\"noopener\">链接</a>，选择<code>New SSH key</code>，把拷贝的公钥配置上去即可。</p>\n</li>\n</ul>\n</li>\n<li><p>安装Nodejs，<a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">下载地址</a>，安装成功后会同时安装好node和npm两个工具，并为npm配置国内源，例如配置淘宝源可以执行下述命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装hexo，执行下述命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g <span class=\"comment\"># install hexo</span></span><br><span class=\"line\">hexo -v <span class=\"comment\"># check whether successfully installed</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"0x01-初始化站点\"><a href=\"#0x01-初始化站点\" class=\"headerlink\" title=\"0x01 初始化站点\"></a>0x01 初始化站点</h2><p>执行以下命令来初始化博客站点，会创建一个新的目录，以blog-dev为例，执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init blog-dev</span><br></pre></td></tr></table></figure>\n\n<p>待命令执行完毕，会新建一个blog-dev目录，进入该目录中，我们可以看到以下目录树：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blog-dev</span><br><span class=\"line\">├── _config.yml        <span class=\"comment\">#---------------- 站点配置文件</span></span><br><span class=\"line\">├── node_modules       <span class=\"comment\">#---------------- npm安装包本地保存目录</span></span><br><span class=\"line\">├── package-lock.json</span><br><span class=\"line\">├── package.json       <span class=\"comment\">#---------------- 依赖包配置文件</span></span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── <span class=\"built_in\">source</span>             <span class=\"comment\">#---------------- 博客文章保存目录</span></span><br><span class=\"line\">└── themes             <span class=\"comment\">#---------------- 博客主题保存目录</span></span><br></pre></td></tr></table></figure>\n\n<p>此时，进入到blog-dev目录，可以执行hexo的相关参数及命令，可以进行站点的管理，简单介绍如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean <span class=\"comment\"># 清除缓存</span></span><br><span class=\"line\">hexo generate <span class=\"comment\"># 生成网站静态文件</span></span><br><span class=\"line\">hexo server <span class=\"comment\"># 启动本地调试模式，默认可以打开localhost:4000查看网站效果</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\"># 发布到GitHub Page，第0x11节会具体介绍</span></span><br></pre></td></tr></table></figure>\n\n<p>hexo还有一个非常方便的点是主题套用十分方便，将想要的模板下载下来，放到themes目录下，然后修改_config.yml文件中的theme字段，改为下载下来的主题目录名即可。主题可以在<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">官方网站下载</a>，也可以自行从各种渠道获取。</p>\n<h2 id=\"0x10-创建github-page\"><a href=\"#0x10-创建github-page\" class=\"headerlink\" title=\"0x10 创建github page\"></a>0x10 创建github page</h2><p>本节内容大家应该都比较熟悉，创建作为个人主页用的github page，必须将仓名命名为username.github.com，经过测试，仓名中的username与你的github账号名可以不区分大小写。</p>\n<p>这部分教程我想偷懒跳过了，可以自行查看<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">官方教程</a>。</p>\n<h2 id=\"0x11-预览和发布\"><a href=\"#0x11-预览和发布\" class=\"headerlink\" title=\"0x11 预览和发布\"></a>0x11 预览和发布</h2><p>在blog-dev目录下执行<code>hexo new &#39;博客标题&#39;</code>即可创建一篇新的博客，使用markdown语法进行编辑。</p>\n<p>编辑完毕之后，执行下述命令，可以启动一个本地的临时服务器进行预览：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server <span class=\"comment\"># 启动本地预览服务</span></span><br></pre></td></tr></table></figure>\n\n<p>在浏览器中打开<code>localhost:4000</code>，即可预览你的博客。</p>\n<p>配置blog-dev的发布路径，编辑blog-dev/_config.yml文件，一般在文件末尾，有一个deploy字段，把第三节创建的github page仓库路径配置上去即可，如果deploy字段下只有一个type，则手动添加其他字段（注意yml文件遵从yaml格式缩紧）。例如我的配置就是：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span>                                                                                                          </span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/ChinoMars/chinomars.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n<p>依次执行下述命令，即可发布你的静态站点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean <span class=\"comment\"># 清除缓存</span></span><br><span class=\"line\">hexo generate <span class=\"comment\"># 生成站点的静态文件</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\"># 自动push到github page所在的master分支，进行发布</span></span><br></pre></td></tr></table></figure>\n\n<p>最后，可以打开网址：<code>https://username.github.io</code>即可查看个人的站点。</p>\n"},{"title":"REPL技术分析——Python的交互式","date":"2020-02-11T16:20:11.000Z","_content":"\n### 概要\n\nPython是一种解释型语言，通过解释器对代码进行逐行执行，一般的解释器也是这样实现，当然也存在一些优化方法，对代码进行JIT编译，提高执行速度。所以Python的REPL可以说是原生支持的。\n\nPython语言有多种解释器，例如：\n\n- CPython：C语言实现的Python解释器，一般情况下在Terminal中执行命令`python`，就会调用CPython解释器执行代码\n- PyPy：前面提到的通过JIT技术提升Python代码执行速度\n- IPython：Python的交互式解释器，底层也是通过调用CPython对代码进行解释执行\n\n回到主题REPL，我们可以以IPython为入口进行分析，进一步对CPython进行分析\n\n### IPython\n\n个人习惯，从源码出发分析。IPtyhon的github源码仓，[链接](https://github.com/ipython/ipython)，交互式开发的mainloop的代码在这个interactiveshell.py中，我们可以看到，IPython支持一个完整的代码块的交互式运行，采用异步的方式运行以保证一定的用户体验。一个完整的代码块，由用户输入，可以是一行完整的python代码，也可以是多行语法的代码块。\n\n```python\ndef _run_cell(self, raw_cell:str, store_history:bool, silent:bool, shell_futures:bool):\n        \"\"\"Internal method to run a complete IPython cell.\"\"\"\n        coro = self.run_cell_async(\n            raw_cell,\n            store_history=store_history,\n            silent=silent,\n            shell_futures=shell_futures,\n        )\n\n        # run_cell_async is async, but may not actually need an eventloop.\n        # when this is the case, we want to run it using the pseudo_sync_runner\n        # so that code can invoke eventloops (for example via the %run , and\n        # `%paste` magic.\n        if self.trio_runner:\n            runner = self.trio_runner\n        elif self.should_run_async(raw_cell):\n            runner = self.loop_runner\n        else:\n            runner = _pseudo_sync_runner\n\n        try:\n            return runner(coro)\n        except BaseException as e:\n            info = ExecutionInfo(raw_cell, store_history, silent, shell_futures)\n            result = ExecutionResult(info)\n            result.error_in_exec = e\n            self.showtraceback(running_compiled_code=True)\n            return result\n        return\n```\n\n继续分析这个run_cell_async：\n\n```python\nasync def run_cell_async(self, raw_cell: str, store_history=False, silent=False, shell_futures=True) -> ExecutionResult:\n        info = ExecutionInfo(\n            raw_cell, store_history, silent, shell_futures)\n        result = ExecutionResult(info)\n\t\t\t\t...\n        # If any of our input transformation (input_transformer_manager or\n        # prefilter_manager) raises an exception, we store it in this variable\n        # so that we can display the error after logging the input and storing\n        # it in the history.\n        try:\n            cell = self.transform_cell(raw_cell)\n        ...\n        # Store raw and processed history\n        ...\n        # Display the exception if input processing failed.\n        ...\n        # Our own compiler remembers the __future__ environment. If we want to\n        # run code with a separate __future__ environment, use the default\n        # compiler\n        compiler = self.compile if shell_futures else CachingCompiler()\n        _run_async = False\n        with self.builtin_trap:\n            cell_name = self.compile.cache(cell, self.execution_count)\n            with self.display_trap:\n                # Compile to bytecode\n                try:\n                    if sys.version_info < (3,8) and self.autoawait:\n                        if _should_be_async(cell):\n                            # the code AST below will not be user code: we wrap it\n                            # in an `async def`. This will likely make some AST\n                            # transformer below miss some transform opportunity and\n                            # introduce a small coupling to run_code (in which we\n                            # bake some assumptions of what _ast_asyncify returns.\n                            # they are ways around (like grafting part of the ast\n                            # later:\n                            #    - Here, return code_ast.body[0].body[1:-1], as well\n                            #    as last expression in  return statement which is\n                            #    the user code part.\n                            #    - Let it go through the AST transformers, and graft\n                            #    - it back after the AST transform\n                            # But that seem unreasonable, at least while we\n                            # do not need it.\n                            code_ast = _ast_asyncify(cell, 'async-def-wrapper')\n                            _run_async = True\n                        else:\n                            code_ast = compiler.ast_parse(cell, filename=cell_name)\n                    else:\n                        code_ast = compiler.ast_parse(cell, filename=cell_name)\n                ...\n                # Apply AST transformations\n                try:\n                    code_ast = self.transform_ast(code_ast)\n                ...\n                # Execute the user code\n                interactivity = \"none\" if silent else self.ast_node_interactivity\n                if _run_async:\n                    interactivity = 'async'\n\n                has_raised = await self.run_ast_nodes(code_ast.body, cell_name,\n                       interactivity=interactivity, compiler=compiler, result=result)\n\t\t\t\t\t\t\t\t...\n                # Reset this so later displayed values do not modify the\n                # ExecutionResult\n                self.displayhook.exec_result = None\n        ...\n        return result\n```\n\n我把一些异常处理的代码省略了，不关键的跳过。删除不关键的处理流程后我们可以分析下源码：\n\n- 首先是将cell代码块（raw_cell），执行历史（store_history），以及一些设置运行模式的参数（silent和shell_futures）来示例化成ExecutionInfo，然后将它塞到ExecutionResult这个方法中，做进一步的封装，方便后续进行执行过程中关键信息的存储\n- `tramsform_cell`的工作主要是做一些行的分割以及其他处理，例如确保每一个输入cell最后有一个空行，这个也是编译器的常规操作，方便parsing的时候计算报错行号\n- `_ast_asyncify`是一个异步方法，将输入cell（源码）解析为ast，同样其他两个分支都是将输入解析为ast，这里的分支是为了区分版本，解决版本兼容性。这里的`compiler`我们没有在IPython源码中找到定义，推测是CPython的封装，后续再分析\n- `run_ast_nodes`也是调用了compiler的能力，下面我们就可以去CPython中进一步分析了\n\nIPython主要对CPython进行封装，将ast导入给CPython进行执行。并且，部分情况下并没有调用compiler封装的run_code方法，而是直接使用Python内置的exec()方法执行python代码，处理也比较简单。\n\n### CPython\n\nCPython是python解释器的c语言实现，也是Python的官方解释器。按照惯例我们还是从源码入手，cpython托管在github上，[项目链接](https://github.com/python/cpython)。\n\n#### 源码分析\n\n首先从main函数出发，找到`Programs/python.c`中的main函数，在进入到repl loop之前，我们快速过一下执行流程。当然，对于c/c++项目而言，最万能的方式还是通过调试，一步一步地借助断点和查看调用栈来分析。在只关注一个具体的功能的时候，个人还是比较偏向于直接看源码，聚焦关键的函数。\n\n执行流程：\n\n- `Programs/python.c:16 => Py_BytesMain`\n- `Modules/main.c:679 => pymain_main`\n- `Modules/main.c:627 Py_RunMain => pymain_run_python`\n\n到pymain_run_python()函数，我们可以具体看一下这个函数里的构成：\n\n```c\nstatic void\npymain_run_python(int *exitcode)\n{\n\t\t...\n    if (config->run_command) {\n        *exitcode = pymain_run_command(config->run_command, &cf);\n    }\n    else if (config->run_module) {\n        *exitcode = pymain_run_module(config->run_module, 1);\n    }\n    else if (main_importer_path != NULL) {\n        *exitcode = pymain_run_module(L\"__main__\", 0);\n    }\n    else if (config->run_filename != NULL) {\n        *exitcode = pymain_run_file(config, &cf);\n    }\n    else {\n        *exitcode = pymain_run_stdin(config, &cf);\n    }\n    pymain_repl(config, &cf, exitcode);\n    goto done;\n\t\t...\n}\n```\n\n在这个函数中，通过函数最开始构建的运行环境配置（config），来决定后续的分支：\n\n- run_command分支：调用`pymain_run_command()`函数，来执行命令\n- run_module分支：调用`pymain_run_module()`函数，运行一个python模块\n- run_filename分支：调用`pymain_run_file()`函数，运行一个python文件\n- 其他：调用`pymain_run_stdin()`函数，来执行一个标准输入\n- 最后：调用`pymain_repl()`函数，启动repl\n\n上述执行分支中，估计大家对于最后两个分支（**其他**和**最后**）会感到十分疑惑，看起来逻辑有重复，**其他**分支中，调用`pymain_run_stdin()`函数后，再启动repl。实际上最后两个分支最终调用的函数都是一样的：\n\n- `pymain_run_stdin()`：\n\n```c\nstatic int\npymain_run_stdin(PyConfig *config, PyCompilerFlags *cf)\n{\n\t\t...\n    int run = PyRun_AnyFileExFlags(stdin, \"<stdin>\", 0, cf);\n    return (run != 0);\n}\n```\n\n- `pymain_repl()`：\n\n```c\nstatic void\npymain_repl(PyConfig *config, PyCompilerFlags *cf, int *exitcode)\n{\n   \t...\n    int res = PyRun_AnyFileFlags(stdin, \"<stdin>\", cf);\n    *exitcode = (res != 0);\n}\n```\n\n实际上，在`pymain_repl()`中调用的`PyRun_AnyFileFlags()`，在`include/pythonrun.h`中定义为：\n\n```c\n#define PyRun_AnyFileFlags(fp, name, flags) \\\n    PyRun_AnyFileExFlags(fp, name, 0, flags)\n```\n\n是一毛一样的呢。最终就执行到了我们的重头戏：`Python/pythonrun.c:91 PyRun_InteractiveLoopFlags()`\n\n#### interactive loop\n\n`PyRun_InteractiveLoopFlags(stdin, \"<stdin>\", 0, cf)`中，从`stdin`标准输入流中读取用户输入，进行执行：\n\n```c\nint\nPyRun_InteractiveLoopFlags(FILE *fp, const char *filename_str, PyCompilerFlags *flags)\n{\n    ...\n    err = 0;\n    do {\n        ret = PyRun_InteractiveOneObjectEx(fp, filename, flags);\n        if (ret == -1 && PyErr_Occurred()) {\n\t\t\t\t\t\t...\n            PyErr_Print();\n            flush_io();\n        } else {\n            nomem_count = 0;\n        }\n    } while (ret != E_EOF);\n    Py_DECREF(filename);\n    return err;\n}\n```\n\n调用`PyRun_InteractiveOneObjectEx()`函数执行用户输入。\n\n我们可以看到对于一个Python Object的执行流程如下：\n\n- `_PyUnicode_FromId`：造一个modulename\n- `_PySys_GetObjectId`：从stdin中读取用户输入\n- `PyImport_AddModuleObject`：加载import模块\n- `run_mod`：运行module\n\n`run_mod()`中：\n\n```c\nstatic PyObject *\nrun_mod(mod_ty mod, PyObject *filename, PyObject *globals, PyObject *locals,\n            PyCompilerFlags *flags, PyArena *arena)\n{\n    PyCodeObject *co;\n    PyObject *v;\n    co = PyAST_CompileObject(mod, filename, flags, -1, arena);\n    if (co == NULL)\n        return NULL;\n\n    if (PySys_Audit(\"exec\", \"O\", co) < 0) {\n        Py_DECREF(co);\n        return NULL;\n    }\n\n    v = run_eval_code_obj(co, globals, locals);\n    Py_DECREF(co);\n    return v;\n}\n```\n\n先将python moduleParse成AST（调用`PyAST_CompileObject()`函数），再编译成Python的ByteCode，最后塞给`run_eval_code_obj()`函数进行执行。\n\n基本上repl的执行流程就讲完了，有点困了，有（bu）时（xiang）间（nong）再细化补充，欢迎留言。\n\n源码分析地比较粗糙，找到一片详细debug，介绍cpython中的编译执行流程的博客，见最后一片参考文章（Internals of CPython），写得比较详细，甚至还简单介绍了gdb的使用方式，很贴心。\n\n### Reference\n\n[Python解释器](https://www.liaoxuefeng.com/wiki/897692888725344/966138843228672)\n\n[interactiveshell.py](https://github.com/ipython/ipython/blob/master/IPython/core/interactiveshell.py)\n\n[Modules/main.c](https://github.com/python/cpython/blob/master/Modules/main.c)\n\n[Python/pythonrun.c](https://github.com/python/cpython/blob/master/Python/pythonrun.c)\n\n[Internals of CPython](https://hackmd.io/@xff9N3eQTLSL4Trq-6setg/ByMHBMjFe?type=view)","source":"_posts/Python的交互式.md","raw":"---\ntitle: REPL技术分析——Python的交互式\ndate: 2020-02-12 00:20:11\ntags:\n- Compiler\n- Python\n---\n\n### 概要\n\nPython是一种解释型语言，通过解释器对代码进行逐行执行，一般的解释器也是这样实现，当然也存在一些优化方法，对代码进行JIT编译，提高执行速度。所以Python的REPL可以说是原生支持的。\n\nPython语言有多种解释器，例如：\n\n- CPython：C语言实现的Python解释器，一般情况下在Terminal中执行命令`python`，就会调用CPython解释器执行代码\n- PyPy：前面提到的通过JIT技术提升Python代码执行速度\n- IPython：Python的交互式解释器，底层也是通过调用CPython对代码进行解释执行\n\n回到主题REPL，我们可以以IPython为入口进行分析，进一步对CPython进行分析\n\n### IPython\n\n个人习惯，从源码出发分析。IPtyhon的github源码仓，[链接](https://github.com/ipython/ipython)，交互式开发的mainloop的代码在这个interactiveshell.py中，我们可以看到，IPython支持一个完整的代码块的交互式运行，采用异步的方式运行以保证一定的用户体验。一个完整的代码块，由用户输入，可以是一行完整的python代码，也可以是多行语法的代码块。\n\n```python\ndef _run_cell(self, raw_cell:str, store_history:bool, silent:bool, shell_futures:bool):\n        \"\"\"Internal method to run a complete IPython cell.\"\"\"\n        coro = self.run_cell_async(\n            raw_cell,\n            store_history=store_history,\n            silent=silent,\n            shell_futures=shell_futures,\n        )\n\n        # run_cell_async is async, but may not actually need an eventloop.\n        # when this is the case, we want to run it using the pseudo_sync_runner\n        # so that code can invoke eventloops (for example via the %run , and\n        # `%paste` magic.\n        if self.trio_runner:\n            runner = self.trio_runner\n        elif self.should_run_async(raw_cell):\n            runner = self.loop_runner\n        else:\n            runner = _pseudo_sync_runner\n\n        try:\n            return runner(coro)\n        except BaseException as e:\n            info = ExecutionInfo(raw_cell, store_history, silent, shell_futures)\n            result = ExecutionResult(info)\n            result.error_in_exec = e\n            self.showtraceback(running_compiled_code=True)\n            return result\n        return\n```\n\n继续分析这个run_cell_async：\n\n```python\nasync def run_cell_async(self, raw_cell: str, store_history=False, silent=False, shell_futures=True) -> ExecutionResult:\n        info = ExecutionInfo(\n            raw_cell, store_history, silent, shell_futures)\n        result = ExecutionResult(info)\n\t\t\t\t...\n        # If any of our input transformation (input_transformer_manager or\n        # prefilter_manager) raises an exception, we store it in this variable\n        # so that we can display the error after logging the input and storing\n        # it in the history.\n        try:\n            cell = self.transform_cell(raw_cell)\n        ...\n        # Store raw and processed history\n        ...\n        # Display the exception if input processing failed.\n        ...\n        # Our own compiler remembers the __future__ environment. If we want to\n        # run code with a separate __future__ environment, use the default\n        # compiler\n        compiler = self.compile if shell_futures else CachingCompiler()\n        _run_async = False\n        with self.builtin_trap:\n            cell_name = self.compile.cache(cell, self.execution_count)\n            with self.display_trap:\n                # Compile to bytecode\n                try:\n                    if sys.version_info < (3,8) and self.autoawait:\n                        if _should_be_async(cell):\n                            # the code AST below will not be user code: we wrap it\n                            # in an `async def`. This will likely make some AST\n                            # transformer below miss some transform opportunity and\n                            # introduce a small coupling to run_code (in which we\n                            # bake some assumptions of what _ast_asyncify returns.\n                            # they are ways around (like grafting part of the ast\n                            # later:\n                            #    - Here, return code_ast.body[0].body[1:-1], as well\n                            #    as last expression in  return statement which is\n                            #    the user code part.\n                            #    - Let it go through the AST transformers, and graft\n                            #    - it back after the AST transform\n                            # But that seem unreasonable, at least while we\n                            # do not need it.\n                            code_ast = _ast_asyncify(cell, 'async-def-wrapper')\n                            _run_async = True\n                        else:\n                            code_ast = compiler.ast_parse(cell, filename=cell_name)\n                    else:\n                        code_ast = compiler.ast_parse(cell, filename=cell_name)\n                ...\n                # Apply AST transformations\n                try:\n                    code_ast = self.transform_ast(code_ast)\n                ...\n                # Execute the user code\n                interactivity = \"none\" if silent else self.ast_node_interactivity\n                if _run_async:\n                    interactivity = 'async'\n\n                has_raised = await self.run_ast_nodes(code_ast.body, cell_name,\n                       interactivity=interactivity, compiler=compiler, result=result)\n\t\t\t\t\t\t\t\t...\n                # Reset this so later displayed values do not modify the\n                # ExecutionResult\n                self.displayhook.exec_result = None\n        ...\n        return result\n```\n\n我把一些异常处理的代码省略了，不关键的跳过。删除不关键的处理流程后我们可以分析下源码：\n\n- 首先是将cell代码块（raw_cell），执行历史（store_history），以及一些设置运行模式的参数（silent和shell_futures）来示例化成ExecutionInfo，然后将它塞到ExecutionResult这个方法中，做进一步的封装，方便后续进行执行过程中关键信息的存储\n- `tramsform_cell`的工作主要是做一些行的分割以及其他处理，例如确保每一个输入cell最后有一个空行，这个也是编译器的常规操作，方便parsing的时候计算报错行号\n- `_ast_asyncify`是一个异步方法，将输入cell（源码）解析为ast，同样其他两个分支都是将输入解析为ast，这里的分支是为了区分版本，解决版本兼容性。这里的`compiler`我们没有在IPython源码中找到定义，推测是CPython的封装，后续再分析\n- `run_ast_nodes`也是调用了compiler的能力，下面我们就可以去CPython中进一步分析了\n\nIPython主要对CPython进行封装，将ast导入给CPython进行执行。并且，部分情况下并没有调用compiler封装的run_code方法，而是直接使用Python内置的exec()方法执行python代码，处理也比较简单。\n\n### CPython\n\nCPython是python解释器的c语言实现，也是Python的官方解释器。按照惯例我们还是从源码入手，cpython托管在github上，[项目链接](https://github.com/python/cpython)。\n\n#### 源码分析\n\n首先从main函数出发，找到`Programs/python.c`中的main函数，在进入到repl loop之前，我们快速过一下执行流程。当然，对于c/c++项目而言，最万能的方式还是通过调试，一步一步地借助断点和查看调用栈来分析。在只关注一个具体的功能的时候，个人还是比较偏向于直接看源码，聚焦关键的函数。\n\n执行流程：\n\n- `Programs/python.c:16 => Py_BytesMain`\n- `Modules/main.c:679 => pymain_main`\n- `Modules/main.c:627 Py_RunMain => pymain_run_python`\n\n到pymain_run_python()函数，我们可以具体看一下这个函数里的构成：\n\n```c\nstatic void\npymain_run_python(int *exitcode)\n{\n\t\t...\n    if (config->run_command) {\n        *exitcode = pymain_run_command(config->run_command, &cf);\n    }\n    else if (config->run_module) {\n        *exitcode = pymain_run_module(config->run_module, 1);\n    }\n    else if (main_importer_path != NULL) {\n        *exitcode = pymain_run_module(L\"__main__\", 0);\n    }\n    else if (config->run_filename != NULL) {\n        *exitcode = pymain_run_file(config, &cf);\n    }\n    else {\n        *exitcode = pymain_run_stdin(config, &cf);\n    }\n    pymain_repl(config, &cf, exitcode);\n    goto done;\n\t\t...\n}\n```\n\n在这个函数中，通过函数最开始构建的运行环境配置（config），来决定后续的分支：\n\n- run_command分支：调用`pymain_run_command()`函数，来执行命令\n- run_module分支：调用`pymain_run_module()`函数，运行一个python模块\n- run_filename分支：调用`pymain_run_file()`函数，运行一个python文件\n- 其他：调用`pymain_run_stdin()`函数，来执行一个标准输入\n- 最后：调用`pymain_repl()`函数，启动repl\n\n上述执行分支中，估计大家对于最后两个分支（**其他**和**最后**）会感到十分疑惑，看起来逻辑有重复，**其他**分支中，调用`pymain_run_stdin()`函数后，再启动repl。实际上最后两个分支最终调用的函数都是一样的：\n\n- `pymain_run_stdin()`：\n\n```c\nstatic int\npymain_run_stdin(PyConfig *config, PyCompilerFlags *cf)\n{\n\t\t...\n    int run = PyRun_AnyFileExFlags(stdin, \"<stdin>\", 0, cf);\n    return (run != 0);\n}\n```\n\n- `pymain_repl()`：\n\n```c\nstatic void\npymain_repl(PyConfig *config, PyCompilerFlags *cf, int *exitcode)\n{\n   \t...\n    int res = PyRun_AnyFileFlags(stdin, \"<stdin>\", cf);\n    *exitcode = (res != 0);\n}\n```\n\n实际上，在`pymain_repl()`中调用的`PyRun_AnyFileFlags()`，在`include/pythonrun.h`中定义为：\n\n```c\n#define PyRun_AnyFileFlags(fp, name, flags) \\\n    PyRun_AnyFileExFlags(fp, name, 0, flags)\n```\n\n是一毛一样的呢。最终就执行到了我们的重头戏：`Python/pythonrun.c:91 PyRun_InteractiveLoopFlags()`\n\n#### interactive loop\n\n`PyRun_InteractiveLoopFlags(stdin, \"<stdin>\", 0, cf)`中，从`stdin`标准输入流中读取用户输入，进行执行：\n\n```c\nint\nPyRun_InteractiveLoopFlags(FILE *fp, const char *filename_str, PyCompilerFlags *flags)\n{\n    ...\n    err = 0;\n    do {\n        ret = PyRun_InteractiveOneObjectEx(fp, filename, flags);\n        if (ret == -1 && PyErr_Occurred()) {\n\t\t\t\t\t\t...\n            PyErr_Print();\n            flush_io();\n        } else {\n            nomem_count = 0;\n        }\n    } while (ret != E_EOF);\n    Py_DECREF(filename);\n    return err;\n}\n```\n\n调用`PyRun_InteractiveOneObjectEx()`函数执行用户输入。\n\n我们可以看到对于一个Python Object的执行流程如下：\n\n- `_PyUnicode_FromId`：造一个modulename\n- `_PySys_GetObjectId`：从stdin中读取用户输入\n- `PyImport_AddModuleObject`：加载import模块\n- `run_mod`：运行module\n\n`run_mod()`中：\n\n```c\nstatic PyObject *\nrun_mod(mod_ty mod, PyObject *filename, PyObject *globals, PyObject *locals,\n            PyCompilerFlags *flags, PyArena *arena)\n{\n    PyCodeObject *co;\n    PyObject *v;\n    co = PyAST_CompileObject(mod, filename, flags, -1, arena);\n    if (co == NULL)\n        return NULL;\n\n    if (PySys_Audit(\"exec\", \"O\", co) < 0) {\n        Py_DECREF(co);\n        return NULL;\n    }\n\n    v = run_eval_code_obj(co, globals, locals);\n    Py_DECREF(co);\n    return v;\n}\n```\n\n先将python moduleParse成AST（调用`PyAST_CompileObject()`函数），再编译成Python的ByteCode，最后塞给`run_eval_code_obj()`函数进行执行。\n\n基本上repl的执行流程就讲完了，有点困了，有（bu）时（xiang）间（nong）再细化补充，欢迎留言。\n\n源码分析地比较粗糙，找到一片详细debug，介绍cpython中的编译执行流程的博客，见最后一片参考文章（Internals of CPython），写得比较详细，甚至还简单介绍了gdb的使用方式，很贴心。\n\n### Reference\n\n[Python解释器](https://www.liaoxuefeng.com/wiki/897692888725344/966138843228672)\n\n[interactiveshell.py](https://github.com/ipython/ipython/blob/master/IPython/core/interactiveshell.py)\n\n[Modules/main.c](https://github.com/python/cpython/blob/master/Modules/main.c)\n\n[Python/pythonrun.c](https://github.com/python/cpython/blob/master/Python/pythonrun.c)\n\n[Internals of CPython](https://hackmd.io/@xff9N3eQTLSL4Trq-6setg/ByMHBMjFe?type=view)","slug":"Python的交互式","published":1,"updated":"2023-10-07T15:06:41.314Z","_id":"ckgs77ell00002qpof19u44y2","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h3><p>Python是一种解释型语言，通过解释器对代码进行逐行执行，一般的解释器也是这样实现，当然也存在一些优化方法，对代码进行JIT编译，提高执行速度。所以Python的REPL可以说是原生支持的。</p>\n<p>Python语言有多种解释器，例如：</p>\n<ul>\n<li>CPython：C语言实现的Python解释器，一般情况下在Terminal中执行命令<code>python</code>，就会调用CPython解释器执行代码</li>\n<li>PyPy：前面提到的通过JIT技术提升Python代码执行速度</li>\n<li>IPython：Python的交互式解释器，底层也是通过调用CPython对代码进行解释执行</li>\n</ul>\n<p>回到主题REPL，我们可以以IPython为入口进行分析，进一步对CPython进行分析</p>\n<h3 id=\"IPython\"><a href=\"#IPython\" class=\"headerlink\" title=\"IPython\"></a>IPython</h3><p>个人习惯，从源码出发分析。IPtyhon的github源码仓，<a href=\"https://github.com/ipython/ipython\" target=\"_blank\" rel=\"noopener\">链接</a>，交互式开发的mainloop的代码在这个interactiveshell.py中，我们可以看到，IPython支持一个完整的代码块的交互式运行，采用异步的方式运行以保证一定的用户体验。一个完整的代码块，由用户输入，可以是一行完整的python代码，也可以是多行语法的代码块。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_run_cell</span><span class=\"params\">(self, raw_cell:str, store_history:bool, silent:bool, shell_futures:bool)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Internal method to run a complete IPython cell.\"\"\"</span></span><br><span class=\"line\">        coro = self.run_cell_async(</span><br><span class=\"line\">            raw_cell,</span><br><span class=\"line\">            store_history=store_history,</span><br><span class=\"line\">            silent=silent,</span><br><span class=\"line\">            shell_futures=shell_futures,</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># run_cell_async is async, but may not actually need an eventloop.</span></span><br><span class=\"line\">        <span class=\"comment\"># when this is the case, we want to run it using the pseudo_sync_runner</span></span><br><span class=\"line\">        <span class=\"comment\"># so that code can invoke eventloops (for example via the %run , and</span></span><br><span class=\"line\">        <span class=\"comment\"># `%paste` magic.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.trio_runner:</span><br><span class=\"line\">            runner = self.trio_runner</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> self.should_run_async(raw_cell):</span><br><span class=\"line\">            runner = self.loop_runner</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            runner = _pseudo_sync_runner</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> runner(coro)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> BaseException <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            info = ExecutionInfo(raw_cell, store_history, silent, shell_futures)</span><br><span class=\"line\">            result = ExecutionResult(info)</span><br><span class=\"line\">            result.error_in_exec = e</span><br><span class=\"line\">            self.showtraceback(running_compiled_code=<span class=\"literal\">True</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br></pre></td></tr></table></figure>\n\n<p>继续分析这个run_cell_async：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_cell_async</span><span class=\"params\">(self, raw_cell: str, store_history=False, silent=False, shell_futures=True)</span> -&gt; ExecutionResult:</span></span><br><span class=\"line\">        info = ExecutionInfo(</span><br><span class=\"line\">            raw_cell, store_history, silent, shell_futures)</span><br><span class=\"line\">        result = ExecutionResult(info)</span><br><span class=\"line\">\t\t\t\t...</span><br><span class=\"line\">        <span class=\"comment\"># If any of our input transformation (input_transformer_manager or</span></span><br><span class=\"line\">        <span class=\"comment\"># prefilter_manager) raises an exception, we store it in this variable</span></span><br><span class=\"line\">        <span class=\"comment\"># so that we can display the error after logging the input and storing</span></span><br><span class=\"line\">        <span class=\"comment\"># it in the history.</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            cell = self.transform_cell(raw_cell)</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"comment\"># Store raw and processed history</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"comment\"># Display the exception if input processing failed.</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"comment\"># Our own compiler remembers the __future__ environment. If we want to</span></span><br><span class=\"line\">        <span class=\"comment\"># run code with a separate __future__ environment, use the default</span></span><br><span class=\"line\">        <span class=\"comment\"># compiler</span></span><br><span class=\"line\">        compiler = self.compile <span class=\"keyword\">if</span> shell_futures <span class=\"keyword\">else</span> CachingCompiler()</span><br><span class=\"line\">        _run_async = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> self.builtin_trap:</span><br><span class=\"line\">            cell_name = self.compile.cache(cell, self.execution_count)</span><br><span class=\"line\">            <span class=\"keyword\">with</span> self.display_trap:</span><br><span class=\"line\">                <span class=\"comment\"># Compile to bytecode</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> sys.version_info &lt; (<span class=\"number\">3</span>,<span class=\"number\">8</span>) <span class=\"keyword\">and</span> self.autoawait:</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> _should_be_async(cell):</span><br><span class=\"line\">                            <span class=\"comment\"># the code AST below will not be user code: we wrap it</span></span><br><span class=\"line\">                            <span class=\"comment\"># in an `async def`. This will likely make some AST</span></span><br><span class=\"line\">                            <span class=\"comment\"># transformer below miss some transform opportunity and</span></span><br><span class=\"line\">                            <span class=\"comment\"># introduce a small coupling to run_code (in which we</span></span><br><span class=\"line\">                            <span class=\"comment\"># bake some assumptions of what _ast_asyncify returns.</span></span><br><span class=\"line\">                            <span class=\"comment\"># they are ways around (like grafting part of the ast</span></span><br><span class=\"line\">                            <span class=\"comment\"># later:</span></span><br><span class=\"line\">                            <span class=\"comment\">#    - Here, return code_ast.body[0].body[1:-1], as well</span></span><br><span class=\"line\">                            <span class=\"comment\">#    as last expression in  return statement which is</span></span><br><span class=\"line\">                            <span class=\"comment\">#    the user code part.</span></span><br><span class=\"line\">                            <span class=\"comment\">#    - Let it go through the AST transformers, and graft</span></span><br><span class=\"line\">                            <span class=\"comment\">#    - it back after the AST transform</span></span><br><span class=\"line\">                            <span class=\"comment\"># But that seem unreasonable, at least while we</span></span><br><span class=\"line\">                            <span class=\"comment\"># do not need it.</span></span><br><span class=\"line\">                            code_ast = _ast_asyncify(cell, <span class=\"string\">'async-def-wrapper'</span>)</span><br><span class=\"line\">                            _run_async = <span class=\"literal\">True</span></span><br><span class=\"line\">                        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                            code_ast = compiler.ast_parse(cell, filename=cell_name)</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        code_ast = compiler.ast_parse(cell, filename=cell_name)</span><br><span class=\"line\">                ...</span><br><span class=\"line\">                <span class=\"comment\"># Apply AST transformations</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                    code_ast = self.transform_ast(code_ast)</span><br><span class=\"line\">                ...</span><br><span class=\"line\">                <span class=\"comment\"># Execute the user code</span></span><br><span class=\"line\">                interactivity = <span class=\"string\">\"none\"</span> <span class=\"keyword\">if</span> silent <span class=\"keyword\">else</span> self.ast_node_interactivity</span><br><span class=\"line\">                <span class=\"keyword\">if</span> _run_async:</span><br><span class=\"line\">                    interactivity = <span class=\"string\">'async'</span></span><br><span class=\"line\"></span><br><span class=\"line\">                has_raised = <span class=\"keyword\">await</span> self.run_ast_nodes(code_ast.body, cell_name,</span><br><span class=\"line\">                       interactivity=interactivity, compiler=compiler, result=result)</span><br><span class=\"line\">\t\t\t\t\t\t\t\t...</span><br><span class=\"line\">                <span class=\"comment\"># Reset this so later displayed values do not modify the</span></span><br><span class=\"line\">                <span class=\"comment\"># ExecutionResult</span></span><br><span class=\"line\">                self.displayhook.exec_result = <span class=\"literal\">None</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n\n<p>我把一些异常处理的代码省略了，不关键的跳过。删除不关键的处理流程后我们可以分析下源码：</p>\n<ul>\n<li>首先是将cell代码块（raw_cell），执行历史（store_history），以及一些设置运行模式的参数（silent和shell_futures）来示例化成ExecutionInfo，然后将它塞到ExecutionResult这个方法中，做进一步的封装，方便后续进行执行过程中关键信息的存储</li>\n<li><code>tramsform_cell</code>的工作主要是做一些行的分割以及其他处理，例如确保每一个输入cell最后有一个空行，这个也是编译器的常规操作，方便parsing的时候计算报错行号</li>\n<li><code>_ast_asyncify</code>是一个异步方法，将输入cell（源码）解析为ast，同样其他两个分支都是将输入解析为ast，这里的分支是为了区分版本，解决版本兼容性。这里的<code>compiler</code>我们没有在IPython源码中找到定义，推测是CPython的封装，后续再分析</li>\n<li><code>run_ast_nodes</code>也是调用了compiler的能力，下面我们就可以去CPython中进一步分析了</li>\n</ul>\n<p>IPython主要对CPython进行封装，将ast导入给CPython进行执行。并且，部分情况下并没有调用compiler封装的run_code方法，而是直接使用Python内置的exec()方法执行python代码，处理也比较简单。</p>\n<h3 id=\"CPython\"><a href=\"#CPython\" class=\"headerlink\" title=\"CPython\"></a>CPython</h3><p>CPython是python解释器的c语言实现，也是Python的官方解释器。按照惯例我们还是从源码入手，cpython托管在github上，<a href=\"https://github.com/python/cpython\" target=\"_blank\" rel=\"noopener\">项目链接</a>。</p>\n<h4 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><p>首先从main函数出发，找到<code>Programs/python.c</code>中的main函数，在进入到repl loop之前，我们快速过一下执行流程。当然，对于c/c++项目而言，最万能的方式还是通过调试，一步一步地借助断点和查看调用栈来分析。在只关注一个具体的功能的时候，个人还是比较偏向于直接看源码，聚焦关键的函数。</p>\n<p>执行流程：</p>\n<ul>\n<li><code>Programs/python.c:16 =&gt; Py_BytesMain</code></li>\n<li><code>Modules/main.c:679 =&gt; pymain_main</code></li>\n<li><code>Modules/main.c:627 Py_RunMain =&gt; pymain_run_python</code></li>\n</ul>\n<p>到pymain_run_python()函数，我们可以具体看一下这个函数里的构成：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">pymain_run_python(<span class=\"keyword\">int</span> *exitcode)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">config</span>-&gt;run_command) &#123;</span><br><span class=\"line\">        *exitcode = pymain_run_command(<span class=\"built_in\">config</span>-&gt;run_command, &amp;cf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">config</span>-&gt;run_module) &#123;</span><br><span class=\"line\">        *exitcode = pymain_run_module(<span class=\"built_in\">config</span>-&gt;run_module, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (main_importer_path != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        *exitcode = pymain_run_module(<span class=\"string\">L\"__main__\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">config</span>-&gt;run_filename != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        *exitcode = pymain_run_file(<span class=\"built_in\">config</span>, &amp;cf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        *exitcode = pymain_run_stdin(<span class=\"built_in\">config</span>, &amp;cf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pymain_repl(<span class=\"built_in\">config</span>, &amp;cf, exitcode);</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> done;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个函数中，通过函数最开始构建的运行环境配置（config），来决定后续的分支：</p>\n<ul>\n<li>run_command分支：调用<code>pymain_run_command()</code>函数，来执行命令</li>\n<li>run_module分支：调用<code>pymain_run_module()</code>函数，运行一个python模块</li>\n<li>run_filename分支：调用<code>pymain_run_file()</code>函数，运行一个python文件</li>\n<li>其他：调用<code>pymain_run_stdin()</code>函数，来执行一个标准输入</li>\n<li>最后：调用<code>pymain_repl()</code>函数，启动repl</li>\n</ul>\n<p>上述执行分支中，估计大家对于最后两个分支（<strong>其他</strong>和<strong>最后</strong>）会感到十分疑惑，看起来逻辑有重复，<strong>其他</strong>分支中，调用<code>pymain_run_stdin()</code>函数后，再启动repl。实际上最后两个分支最终调用的函数都是一样的：</p>\n<ul>\n<li><code>pymain_run_stdin()</code>：</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span></span><br><span class=\"line\">pymain_run_stdin(PyConfig *<span class=\"built_in\">config</span>, PyCompilerFlags *cf)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">run</span> = PyRun_AnyFileExFlags(<span class=\"built_in\">stdin</span>, <span class=\"string\">\"&lt;stdin&gt;\"</span>, <span class=\"number\">0</span>, cf);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"built_in\">run</span> != <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>pymain_repl()</code>：</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">pymain_repl(PyConfig *<span class=\"built_in\">config</span>, PyCompilerFlags *cf, <span class=\"keyword\">int</span> *exitcode)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   \t...</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = PyRun_AnyFileFlags(<span class=\"built_in\">stdin</span>, <span class=\"string\">\"&lt;stdin&gt;\"</span>, cf);</span><br><span class=\"line\">    *exitcode = (res != <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际上，在<code>pymain_repl()</code>中调用的<code>PyRun_AnyFileFlags()</code>，在<code>include/pythonrun.h</code>中定义为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PyRun_AnyFileFlags(fp, name, flags) \\</span></span><br><span class=\"line\">    PyRun_AnyFileExFlags(fp, name, <span class=\"number\">0</span>, flags)</span><br></pre></td></tr></table></figure>\n\n<p>是一毛一样的呢。最终就执行到了我们的重头戏：<code>Python/pythonrun.c:91 PyRun_InteractiveLoopFlags()</code></p>\n<h4 id=\"interactive-loop\"><a href=\"#interactive-loop\" class=\"headerlink\" title=\"interactive loop\"></a>interactive loop</h4><p><code>PyRun_InteractiveLoopFlags(stdin, &quot;&lt;stdin&gt;&quot;, 0, cf)</code>中，从<code>stdin</code>标准输入流中读取用户输入，进行执行：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span></span><br><span class=\"line\">PyRun_InteractiveLoopFlags(FILE *fp, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *filename_str, PyCompilerFlags *flags)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    err = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        ret = PyRun_InteractiveOneObjectEx(fp, filename, flags);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span> &amp;&amp; PyErr_Occurred()) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t...</span><br><span class=\"line\">            PyErr_Print();</span><br><span class=\"line\">            flush_io();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            nomem_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (ret != E_EOF);</span><br><span class=\"line\">    Py_DECREF(filename);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用<code>PyRun_InteractiveOneObjectEx()</code>函数执行用户输入。</p>\n<p>我们可以看到对于一个Python Object的执行流程如下：</p>\n<ul>\n<li><code>_PyUnicode_FromId</code>：造一个modulename</li>\n<li><code>_PySys_GetObjectId</code>：从stdin中读取用户输入</li>\n<li><code>PyImport_AddModuleObject</code>：加载import模块</li>\n<li><code>run_mod</code>：运行module</li>\n</ul>\n<p><code>run_mod()</code>中：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> PyObject *</span><br><span class=\"line\">run_mod(mod_ty mod, PyObject *filename, PyObject *globals, PyObject *locals,</span><br><span class=\"line\">            PyCompilerFlags *flags, PyArena *arena)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    PyCodeObject *co;</span><br><span class=\"line\">    PyObject *v;</span><br><span class=\"line\">    co = PyAST_CompileObject(mod, filename, flags, <span class=\"number\">-1</span>, arena);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (co == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (PySys_Audit(<span class=\"string\">\"exec\"</span>, <span class=\"string\">\"O\"</span>, co) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        Py_DECREF(co);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    v = run_eval_code_obj(co, globals, locals);</span><br><span class=\"line\">    Py_DECREF(co);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>先将python moduleParse成AST（调用<code>PyAST_CompileObject()</code>函数），再编译成Python的ByteCode，最后塞给<code>run_eval_code_obj()</code>函数进行执行。</p>\n<p>基本上repl的执行流程就讲完了，有点困了，有（bu）时（xiang）间（nong）再细化补充，欢迎留言。</p>\n<p>源码分析地比较粗糙，找到一片详细debug，介绍cpython中的编译执行流程的博客，见最后一片参考文章（Internals of CPython），写得比较详细，甚至还简单介绍了gdb的使用方式，很贴心。</p>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><p><a href=\"https://www.liaoxuefeng.com/wiki/897692888725344/966138843228672\" target=\"_blank\" rel=\"noopener\">Python解释器</a></p>\n<p><a href=\"https://github.com/ipython/ipython/blob/master/IPython/core/interactiveshell.py\" target=\"_blank\" rel=\"noopener\">interactiveshell.py</a></p>\n<p><a href=\"https://github.com/python/cpython/blob/master/Modules/main.c\" target=\"_blank\" rel=\"noopener\">Modules/main.c</a></p>\n<p><a href=\"https://github.com/python/cpython/blob/master/Python/pythonrun.c\" target=\"_blank\" rel=\"noopener\">Python/pythonrun.c</a></p>\n<p><a href=\"https://hackmd.io/@xff9N3eQTLSL4Trq-6setg/ByMHBMjFe?type=view\" target=\"_blank\" rel=\"noopener\">Internals of CPython</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h3><p>Python是一种解释型语言，通过解释器对代码进行逐行执行，一般的解释器也是这样实现，当然也存在一些优化方法，对代码进行JIT编译，提高执行速度。所以Python的REPL可以说是原生支持的。</p>\n<p>Python语言有多种解释器，例如：</p>\n<ul>\n<li>CPython：C语言实现的Python解释器，一般情况下在Terminal中执行命令<code>python</code>，就会调用CPython解释器执行代码</li>\n<li>PyPy：前面提到的通过JIT技术提升Python代码执行速度</li>\n<li>IPython：Python的交互式解释器，底层也是通过调用CPython对代码进行解释执行</li>\n</ul>\n<p>回到主题REPL，我们可以以IPython为入口进行分析，进一步对CPython进行分析</p>\n<h3 id=\"IPython\"><a href=\"#IPython\" class=\"headerlink\" title=\"IPython\"></a>IPython</h3><p>个人习惯，从源码出发分析。IPtyhon的github源码仓，<a href=\"https://github.com/ipython/ipython\" target=\"_blank\" rel=\"noopener\">链接</a>，交互式开发的mainloop的代码在这个interactiveshell.py中，我们可以看到，IPython支持一个完整的代码块的交互式运行，采用异步的方式运行以保证一定的用户体验。一个完整的代码块，由用户输入，可以是一行完整的python代码，也可以是多行语法的代码块。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_run_cell</span><span class=\"params\">(self, raw_cell:str, store_history:bool, silent:bool, shell_futures:bool)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Internal method to run a complete IPython cell.\"\"\"</span></span><br><span class=\"line\">        coro = self.run_cell_async(</span><br><span class=\"line\">            raw_cell,</span><br><span class=\"line\">            store_history=store_history,</span><br><span class=\"line\">            silent=silent,</span><br><span class=\"line\">            shell_futures=shell_futures,</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># run_cell_async is async, but may not actually need an eventloop.</span></span><br><span class=\"line\">        <span class=\"comment\"># when this is the case, we want to run it using the pseudo_sync_runner</span></span><br><span class=\"line\">        <span class=\"comment\"># so that code can invoke eventloops (for example via the %run , and</span></span><br><span class=\"line\">        <span class=\"comment\"># `%paste` magic.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.trio_runner:</span><br><span class=\"line\">            runner = self.trio_runner</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> self.should_run_async(raw_cell):</span><br><span class=\"line\">            runner = self.loop_runner</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            runner = _pseudo_sync_runner</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> runner(coro)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> BaseException <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            info = ExecutionInfo(raw_cell, store_history, silent, shell_futures)</span><br><span class=\"line\">            result = ExecutionResult(info)</span><br><span class=\"line\">            result.error_in_exec = e</span><br><span class=\"line\">            self.showtraceback(running_compiled_code=<span class=\"literal\">True</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br></pre></td></tr></table></figure>\n\n<p>继续分析这个run_cell_async：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_cell_async</span><span class=\"params\">(self, raw_cell: str, store_history=False, silent=False, shell_futures=True)</span> -&gt; ExecutionResult:</span></span><br><span class=\"line\">        info = ExecutionInfo(</span><br><span class=\"line\">            raw_cell, store_history, silent, shell_futures)</span><br><span class=\"line\">        result = ExecutionResult(info)</span><br><span class=\"line\">\t\t\t\t...</span><br><span class=\"line\">        <span class=\"comment\"># If any of our input transformation (input_transformer_manager or</span></span><br><span class=\"line\">        <span class=\"comment\"># prefilter_manager) raises an exception, we store it in this variable</span></span><br><span class=\"line\">        <span class=\"comment\"># so that we can display the error after logging the input and storing</span></span><br><span class=\"line\">        <span class=\"comment\"># it in the history.</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            cell = self.transform_cell(raw_cell)</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"comment\"># Store raw and processed history</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"comment\"># Display the exception if input processing failed.</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"comment\"># Our own compiler remembers the __future__ environment. If we want to</span></span><br><span class=\"line\">        <span class=\"comment\"># run code with a separate __future__ environment, use the default</span></span><br><span class=\"line\">        <span class=\"comment\"># compiler</span></span><br><span class=\"line\">        compiler = self.compile <span class=\"keyword\">if</span> shell_futures <span class=\"keyword\">else</span> CachingCompiler()</span><br><span class=\"line\">        _run_async = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> self.builtin_trap:</span><br><span class=\"line\">            cell_name = self.compile.cache(cell, self.execution_count)</span><br><span class=\"line\">            <span class=\"keyword\">with</span> self.display_trap:</span><br><span class=\"line\">                <span class=\"comment\"># Compile to bytecode</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> sys.version_info &lt; (<span class=\"number\">3</span>,<span class=\"number\">8</span>) <span class=\"keyword\">and</span> self.autoawait:</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> _should_be_async(cell):</span><br><span class=\"line\">                            <span class=\"comment\"># the code AST below will not be user code: we wrap it</span></span><br><span class=\"line\">                            <span class=\"comment\"># in an `async def`. This will likely make some AST</span></span><br><span class=\"line\">                            <span class=\"comment\"># transformer below miss some transform opportunity and</span></span><br><span class=\"line\">                            <span class=\"comment\"># introduce a small coupling to run_code (in which we</span></span><br><span class=\"line\">                            <span class=\"comment\"># bake some assumptions of what _ast_asyncify returns.</span></span><br><span class=\"line\">                            <span class=\"comment\"># they are ways around (like grafting part of the ast</span></span><br><span class=\"line\">                            <span class=\"comment\"># later:</span></span><br><span class=\"line\">                            <span class=\"comment\">#    - Here, return code_ast.body[0].body[1:-1], as well</span></span><br><span class=\"line\">                            <span class=\"comment\">#    as last expression in  return statement which is</span></span><br><span class=\"line\">                            <span class=\"comment\">#    the user code part.</span></span><br><span class=\"line\">                            <span class=\"comment\">#    - Let it go through the AST transformers, and graft</span></span><br><span class=\"line\">                            <span class=\"comment\">#    - it back after the AST transform</span></span><br><span class=\"line\">                            <span class=\"comment\"># But that seem unreasonable, at least while we</span></span><br><span class=\"line\">                            <span class=\"comment\"># do not need it.</span></span><br><span class=\"line\">                            code_ast = _ast_asyncify(cell, <span class=\"string\">'async-def-wrapper'</span>)</span><br><span class=\"line\">                            _run_async = <span class=\"literal\">True</span></span><br><span class=\"line\">                        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                            code_ast = compiler.ast_parse(cell, filename=cell_name)</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        code_ast = compiler.ast_parse(cell, filename=cell_name)</span><br><span class=\"line\">                ...</span><br><span class=\"line\">                <span class=\"comment\"># Apply AST transformations</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                    code_ast = self.transform_ast(code_ast)</span><br><span class=\"line\">                ...</span><br><span class=\"line\">                <span class=\"comment\"># Execute the user code</span></span><br><span class=\"line\">                interactivity = <span class=\"string\">\"none\"</span> <span class=\"keyword\">if</span> silent <span class=\"keyword\">else</span> self.ast_node_interactivity</span><br><span class=\"line\">                <span class=\"keyword\">if</span> _run_async:</span><br><span class=\"line\">                    interactivity = <span class=\"string\">'async'</span></span><br><span class=\"line\"></span><br><span class=\"line\">                has_raised = <span class=\"keyword\">await</span> self.run_ast_nodes(code_ast.body, cell_name,</span><br><span class=\"line\">                       interactivity=interactivity, compiler=compiler, result=result)</span><br><span class=\"line\">\t\t\t\t\t\t\t\t...</span><br><span class=\"line\">                <span class=\"comment\"># Reset this so later displayed values do not modify the</span></span><br><span class=\"line\">                <span class=\"comment\"># ExecutionResult</span></span><br><span class=\"line\">                self.displayhook.exec_result = <span class=\"literal\">None</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n\n<p>我把一些异常处理的代码省略了，不关键的跳过。删除不关键的处理流程后我们可以分析下源码：</p>\n<ul>\n<li>首先是将cell代码块（raw_cell），执行历史（store_history），以及一些设置运行模式的参数（silent和shell_futures）来示例化成ExecutionInfo，然后将它塞到ExecutionResult这个方法中，做进一步的封装，方便后续进行执行过程中关键信息的存储</li>\n<li><code>tramsform_cell</code>的工作主要是做一些行的分割以及其他处理，例如确保每一个输入cell最后有一个空行，这个也是编译器的常规操作，方便parsing的时候计算报错行号</li>\n<li><code>_ast_asyncify</code>是一个异步方法，将输入cell（源码）解析为ast，同样其他两个分支都是将输入解析为ast，这里的分支是为了区分版本，解决版本兼容性。这里的<code>compiler</code>我们没有在IPython源码中找到定义，推测是CPython的封装，后续再分析</li>\n<li><code>run_ast_nodes</code>也是调用了compiler的能力，下面我们就可以去CPython中进一步分析了</li>\n</ul>\n<p>IPython主要对CPython进行封装，将ast导入给CPython进行执行。并且，部分情况下并没有调用compiler封装的run_code方法，而是直接使用Python内置的exec()方法执行python代码，处理也比较简单。</p>\n<h3 id=\"CPython\"><a href=\"#CPython\" class=\"headerlink\" title=\"CPython\"></a>CPython</h3><p>CPython是python解释器的c语言实现，也是Python的官方解释器。按照惯例我们还是从源码入手，cpython托管在github上，<a href=\"https://github.com/python/cpython\" target=\"_blank\" rel=\"noopener\">项目链接</a>。</p>\n<h4 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><p>首先从main函数出发，找到<code>Programs/python.c</code>中的main函数，在进入到repl loop之前，我们快速过一下执行流程。当然，对于c/c++项目而言，最万能的方式还是通过调试，一步一步地借助断点和查看调用栈来分析。在只关注一个具体的功能的时候，个人还是比较偏向于直接看源码，聚焦关键的函数。</p>\n<p>执行流程：</p>\n<ul>\n<li><code>Programs/python.c:16 =&gt; Py_BytesMain</code></li>\n<li><code>Modules/main.c:679 =&gt; pymain_main</code></li>\n<li><code>Modules/main.c:627 Py_RunMain =&gt; pymain_run_python</code></li>\n</ul>\n<p>到pymain_run_python()函数，我们可以具体看一下这个函数里的构成：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">pymain_run_python(<span class=\"keyword\">int</span> *exitcode)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">config</span>-&gt;run_command) &#123;</span><br><span class=\"line\">        *exitcode = pymain_run_command(<span class=\"built_in\">config</span>-&gt;run_command, &amp;cf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">config</span>-&gt;run_module) &#123;</span><br><span class=\"line\">        *exitcode = pymain_run_module(<span class=\"built_in\">config</span>-&gt;run_module, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (main_importer_path != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        *exitcode = pymain_run_module(<span class=\"string\">L\"__main__\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">config</span>-&gt;run_filename != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        *exitcode = pymain_run_file(<span class=\"built_in\">config</span>, &amp;cf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        *exitcode = pymain_run_stdin(<span class=\"built_in\">config</span>, &amp;cf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pymain_repl(<span class=\"built_in\">config</span>, &amp;cf, exitcode);</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> done;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个函数中，通过函数最开始构建的运行环境配置（config），来决定后续的分支：</p>\n<ul>\n<li>run_command分支：调用<code>pymain_run_command()</code>函数，来执行命令</li>\n<li>run_module分支：调用<code>pymain_run_module()</code>函数，运行一个python模块</li>\n<li>run_filename分支：调用<code>pymain_run_file()</code>函数，运行一个python文件</li>\n<li>其他：调用<code>pymain_run_stdin()</code>函数，来执行一个标准输入</li>\n<li>最后：调用<code>pymain_repl()</code>函数，启动repl</li>\n</ul>\n<p>上述执行分支中，估计大家对于最后两个分支（<strong>其他</strong>和<strong>最后</strong>）会感到十分疑惑，看起来逻辑有重复，<strong>其他</strong>分支中，调用<code>pymain_run_stdin()</code>函数后，再启动repl。实际上最后两个分支最终调用的函数都是一样的：</p>\n<ul>\n<li><code>pymain_run_stdin()</code>：</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span></span><br><span class=\"line\">pymain_run_stdin(PyConfig *<span class=\"built_in\">config</span>, PyCompilerFlags *cf)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">run</span> = PyRun_AnyFileExFlags(<span class=\"built_in\">stdin</span>, <span class=\"string\">\"&lt;stdin&gt;\"</span>, <span class=\"number\">0</span>, cf);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"built_in\">run</span> != <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>pymain_repl()</code>：</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">pymain_repl(PyConfig *<span class=\"built_in\">config</span>, PyCompilerFlags *cf, <span class=\"keyword\">int</span> *exitcode)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   \t...</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = PyRun_AnyFileFlags(<span class=\"built_in\">stdin</span>, <span class=\"string\">\"&lt;stdin&gt;\"</span>, cf);</span><br><span class=\"line\">    *exitcode = (res != <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际上，在<code>pymain_repl()</code>中调用的<code>PyRun_AnyFileFlags()</code>，在<code>include/pythonrun.h</code>中定义为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PyRun_AnyFileFlags(fp, name, flags) \\</span></span><br><span class=\"line\">    PyRun_AnyFileExFlags(fp, name, <span class=\"number\">0</span>, flags)</span><br></pre></td></tr></table></figure>\n\n<p>是一毛一样的呢。最终就执行到了我们的重头戏：<code>Python/pythonrun.c:91 PyRun_InteractiveLoopFlags()</code></p>\n<h4 id=\"interactive-loop\"><a href=\"#interactive-loop\" class=\"headerlink\" title=\"interactive loop\"></a>interactive loop</h4><p><code>PyRun_InteractiveLoopFlags(stdin, &quot;&lt;stdin&gt;&quot;, 0, cf)</code>中，从<code>stdin</code>标准输入流中读取用户输入，进行执行：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span></span><br><span class=\"line\">PyRun_InteractiveLoopFlags(FILE *fp, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *filename_str, PyCompilerFlags *flags)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    err = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        ret = PyRun_InteractiveOneObjectEx(fp, filename, flags);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span> &amp;&amp; PyErr_Occurred()) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t...</span><br><span class=\"line\">            PyErr_Print();</span><br><span class=\"line\">            flush_io();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            nomem_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (ret != E_EOF);</span><br><span class=\"line\">    Py_DECREF(filename);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用<code>PyRun_InteractiveOneObjectEx()</code>函数执行用户输入。</p>\n<p>我们可以看到对于一个Python Object的执行流程如下：</p>\n<ul>\n<li><code>_PyUnicode_FromId</code>：造一个modulename</li>\n<li><code>_PySys_GetObjectId</code>：从stdin中读取用户输入</li>\n<li><code>PyImport_AddModuleObject</code>：加载import模块</li>\n<li><code>run_mod</code>：运行module</li>\n</ul>\n<p><code>run_mod()</code>中：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> PyObject *</span><br><span class=\"line\">run_mod(mod_ty mod, PyObject *filename, PyObject *globals, PyObject *locals,</span><br><span class=\"line\">            PyCompilerFlags *flags, PyArena *arena)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    PyCodeObject *co;</span><br><span class=\"line\">    PyObject *v;</span><br><span class=\"line\">    co = PyAST_CompileObject(mod, filename, flags, <span class=\"number\">-1</span>, arena);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (co == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (PySys_Audit(<span class=\"string\">\"exec\"</span>, <span class=\"string\">\"O\"</span>, co) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        Py_DECREF(co);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    v = run_eval_code_obj(co, globals, locals);</span><br><span class=\"line\">    Py_DECREF(co);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>先将python moduleParse成AST（调用<code>PyAST_CompileObject()</code>函数），再编译成Python的ByteCode，最后塞给<code>run_eval_code_obj()</code>函数进行执行。</p>\n<p>基本上repl的执行流程就讲完了，有点困了，有（bu）时（xiang）间（nong）再细化补充，欢迎留言。</p>\n<p>源码分析地比较粗糙，找到一片详细debug，介绍cpython中的编译执行流程的博客，见最后一片参考文章（Internals of CPython），写得比较详细，甚至还简单介绍了gdb的使用方式，很贴心。</p>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><p><a href=\"https://www.liaoxuefeng.com/wiki/897692888725344/966138843228672\" target=\"_blank\" rel=\"noopener\">Python解释器</a></p>\n<p><a href=\"https://github.com/ipython/ipython/blob/master/IPython/core/interactiveshell.py\" target=\"_blank\" rel=\"noopener\">interactiveshell.py</a></p>\n<p><a href=\"https://github.com/python/cpython/blob/master/Modules/main.c\" target=\"_blank\" rel=\"noopener\">Modules/main.c</a></p>\n<p><a href=\"https://github.com/python/cpython/blob/master/Python/pythonrun.c\" target=\"_blank\" rel=\"noopener\">Python/pythonrun.c</a></p>\n<p><a href=\"https://hackmd.io/@xff9N3eQTLSL4Trq-6setg/ByMHBMjFe?type=view\" target=\"_blank\" rel=\"noopener\">Internals of CPython</a></p>\n"},{"title":"REPL技术分析——Swift REPL模式","date":"2020-02-07T08:45:43.000Z","_content":"\n### 技术路线\n\n在IR层面支持REPL，提供swift解释器，swift提供了编译器runtime，提供基础的词法分析、语法分析、IR生成能力，并可基于llvm ir进行表达式eval，通过JIT的方式在解释器中支持REPL。\n\n### 源码分析\n\n1. 头文件：`include/swift/Immediate/Immediate.h`，包含两个接口\n\n   ```cpp\n   int RunImmediately(CompilerInstance &CI, const ProcessCmdLine &CmdLine,\n                        const IRGenOptions &IRGenOpts, const SILOptions &SILOpts,\n                        std::unique_ptr<SILModule> &&SM);\n   void runREPL(CompilerInstance &CI, const ProcessCmdLine &CmdLine,\n                  bool ParseStdlib);\n   ```\n\n   - RunImmediately方法用于基于**SIL（Swift Intermediate Language）**，立即Eval当前IR Module，相当于是解释器\n   - runREPL方法提供给FrontendTool.cpp前端逻辑进行调用，作为REPL的main loop\n\n2. 源码文件：Immediate.cpp\n\n实现几个功能：\n\n```cpp\nvoid *loadSwiftRuntime(ArrayRef<std::string> runtimeLibPaths);\nbool tryLoadLibraries(ArrayRef<LinkLibrary> LinkLibraries,\n                      SearchPathOptions SearchPathOpts,\n                      DiagnosticEngine &Diags);\nbool linkLLVMModules(llvm::Module *Module,\n                     std::unique_ptr<llvm::Module> SubModule);\nbool autolinkImportedModules(ModuleDecl *M, const IRGenOptions &IRGenOpts);\nint swift::RunImmediately(CompilerInstance &CI,\n                          const ProcessCmdLine &CmdLine,\n                          const IRGenOptions &IRGenOpts,\n                          const SILOptions &SILOpts,\n                          std::unique_ptr<SILModule> &&SM);\n```\n\n- 加载swift编译器runtime：swiftCore\n- llvm ir module间合并\n- import module的支持\n- RunImmediately：将input翻译成llvm ir，调用`llvm::ExecutionEngine`直接执行llvm ir\u0018\n\n3. 源码文件：REPL.cpp\n\nREPL的主函数，从Frontend.cpp进来，主要由一个读取用户input的main loop，对每个输入进行处理。依赖histedit的支持\n\n### Reference:\n\n[What's REPL](https://blog.csdn.net/weixin_43740680/article/details/98234795)\n\n[Source Code Immediate.cpp](https://github.com/apple/swift/blob/master/lib/Immediate/Immediate.cpp)\n\n[Source Code REPL.cpp](https://github.com/apple/swift/blob/master/lib/Immediate/REPL.cpp)\n\n[histedit.h: Line editor and history interface.](http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/lib/libedit/histedit.h)","source":"_posts/Swift-REPL模式介绍.md","raw":"---\ntitle: REPL技术分析——Swift REPL模式\ndate: 2020-02-07 16:45:43\ntags:\n- Swift\n- Compiler\n---\n\n### 技术路线\n\n在IR层面支持REPL，提供swift解释器，swift提供了编译器runtime，提供基础的词法分析、语法分析、IR生成能力，并可基于llvm ir进行表达式eval，通过JIT的方式在解释器中支持REPL。\n\n### 源码分析\n\n1. 头文件：`include/swift/Immediate/Immediate.h`，包含两个接口\n\n   ```cpp\n   int RunImmediately(CompilerInstance &CI, const ProcessCmdLine &CmdLine,\n                        const IRGenOptions &IRGenOpts, const SILOptions &SILOpts,\n                        std::unique_ptr<SILModule> &&SM);\n   void runREPL(CompilerInstance &CI, const ProcessCmdLine &CmdLine,\n                  bool ParseStdlib);\n   ```\n\n   - RunImmediately方法用于基于**SIL（Swift Intermediate Language）**，立即Eval当前IR Module，相当于是解释器\n   - runREPL方法提供给FrontendTool.cpp前端逻辑进行调用，作为REPL的main loop\n\n2. 源码文件：Immediate.cpp\n\n实现几个功能：\n\n```cpp\nvoid *loadSwiftRuntime(ArrayRef<std::string> runtimeLibPaths);\nbool tryLoadLibraries(ArrayRef<LinkLibrary> LinkLibraries,\n                      SearchPathOptions SearchPathOpts,\n                      DiagnosticEngine &Diags);\nbool linkLLVMModules(llvm::Module *Module,\n                     std::unique_ptr<llvm::Module> SubModule);\nbool autolinkImportedModules(ModuleDecl *M, const IRGenOptions &IRGenOpts);\nint swift::RunImmediately(CompilerInstance &CI,\n                          const ProcessCmdLine &CmdLine,\n                          const IRGenOptions &IRGenOpts,\n                          const SILOptions &SILOpts,\n                          std::unique_ptr<SILModule> &&SM);\n```\n\n- 加载swift编译器runtime：swiftCore\n- llvm ir module间合并\n- import module的支持\n- RunImmediately：将input翻译成llvm ir，调用`llvm::ExecutionEngine`直接执行llvm ir\u0018\n\n3. 源码文件：REPL.cpp\n\nREPL的主函数，从Frontend.cpp进来，主要由一个读取用户input的main loop，对每个输入进行处理。依赖histedit的支持\n\n### Reference:\n\n[What's REPL](https://blog.csdn.net/weixin_43740680/article/details/98234795)\n\n[Source Code Immediate.cpp](https://github.com/apple/swift/blob/master/lib/Immediate/Immediate.cpp)\n\n[Source Code REPL.cpp](https://github.com/apple/swift/blob/master/lib/Immediate/REPL.cpp)\n\n[histedit.h: Line editor and history interface.](http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/lib/libedit/histedit.h)","slug":"Swift-REPL模式介绍","published":1,"updated":"2023-10-07T15:06:41.314Z","_id":"ckgs77xk600062qpo10zt7424","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"技术路线\"><a href=\"#技术路线\" class=\"headerlink\" title=\"技术路线\"></a>技术路线</h3><p>在IR层面支持REPL，提供swift解释器，swift提供了编译器runtime，提供基础的词法分析、语法分析、IR生成能力，并可基于llvm ir进行表达式eval，通过JIT的方式在解释器中支持REPL。</p>\n<h3 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h3><ol>\n<li><p>头文件：<code>include/swift/Immediate/Immediate.h</code>，包含两个接口</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">RunImmediately</span><span class=\"params\">(CompilerInstance &amp;CI, <span class=\"keyword\">const</span> ProcessCmdLine &amp;CmdLine,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                     <span class=\"keyword\">const</span> IRGenOptions &amp;IRGenOpts, <span class=\"keyword\">const</span> SILOptions &amp;SILOpts,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                     <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;SILModule&gt; &amp;&amp;SM)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">runREPL</span><span class=\"params\">(CompilerInstance &amp;CI, <span class=\"keyword\">const</span> ProcessCmdLine &amp;CmdLine,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">               <span class=\"keyword\">bool</span> ParseStdlib)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>RunImmediately方法用于基于<strong>SIL（Swift Intermediate Language）</strong>，立即Eval当前IR Module，相当于是解释器</li>\n<li>runREPL方法提供给FrontendTool.cpp前端逻辑进行调用，作为REPL的main loop</li>\n</ul>\n</li>\n<li><p>源码文件：Immediate.cpp</p>\n</li>\n</ol>\n<p>实现几个功能：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">loadSwiftRuntime</span><span class=\"params\">(ArrayRef&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&gt; runtimeLibPaths)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">tryLoadLibraries</span><span class=\"params\">(ArrayRef&lt;LinkLibrary&gt; LinkLibraries,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                      SearchPathOptions SearchPathOpts,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                      DiagnosticEngine &amp;Diags)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">linkLLVMModules</span><span class=\"params\">(llvm::Module *Module,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                     <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;llvm::Module&gt; SubModule)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">autolinkImportedModules</span><span class=\"params\">(ModuleDecl *M, <span class=\"keyword\">const</span> IRGenOptions &amp;IRGenOpts)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">swift::RunImmediately</span><span class=\"params\">(CompilerInstance &amp;CI,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          <span class=\"keyword\">const</span> ProcessCmdLine &amp;CmdLine,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          <span class=\"keyword\">const</span> IRGenOptions &amp;IRGenOpts,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          <span class=\"keyword\">const</span> SILOptions &amp;SILOpts,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;SILModule&gt; &amp;&amp;SM)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>加载swift编译器runtime：swiftCore</li>\n<li>llvm ir module间合并</li>\n<li>import module的支持</li>\n<li>RunImmediately：将input翻译成llvm ir，调用<code>llvm::ExecutionEngine</code>直接执行llvm ir\u0018</li>\n</ul>\n<ol start=\"3\">\n<li>源码文件：REPL.cpp</li>\n</ol>\n<p>REPL的主函数，从Frontend.cpp进来，主要由一个读取用户input的main loop，对每个输入进行处理。依赖histedit的支持</p>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference:\"></a>Reference:</h3><p><a href=\"https://blog.csdn.net/weixin_43740680/article/details/98234795\" target=\"_blank\" rel=\"noopener\">What’s REPL</a></p>\n<p><a href=\"https://github.com/apple/swift/blob/master/lib/Immediate/Immediate.cpp\" target=\"_blank\" rel=\"noopener\">Source Code Immediate.cpp</a></p>\n<p><a href=\"https://github.com/apple/swift/blob/master/lib/Immediate/REPL.cpp\" target=\"_blank\" rel=\"noopener\">Source Code REPL.cpp</a></p>\n<p><a href=\"http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/lib/libedit/histedit.h\" target=\"_blank\" rel=\"noopener\">histedit.h: Line editor and history interface.</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"技术路线\"><a href=\"#技术路线\" class=\"headerlink\" title=\"技术路线\"></a>技术路线</h3><p>在IR层面支持REPL，提供swift解释器，swift提供了编译器runtime，提供基础的词法分析、语法分析、IR生成能力，并可基于llvm ir进行表达式eval，通过JIT的方式在解释器中支持REPL。</p>\n<h3 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h3><ol>\n<li><p>头文件：<code>include/swift/Immediate/Immediate.h</code>，包含两个接口</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">RunImmediately</span><span class=\"params\">(CompilerInstance &amp;CI, <span class=\"keyword\">const</span> ProcessCmdLine &amp;CmdLine,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                     <span class=\"keyword\">const</span> IRGenOptions &amp;IRGenOpts, <span class=\"keyword\">const</span> SILOptions &amp;SILOpts,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                     <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;SILModule&gt; &amp;&amp;SM)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">runREPL</span><span class=\"params\">(CompilerInstance &amp;CI, <span class=\"keyword\">const</span> ProcessCmdLine &amp;CmdLine,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">               <span class=\"keyword\">bool</span> ParseStdlib)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>RunImmediately方法用于基于<strong>SIL（Swift Intermediate Language）</strong>，立即Eval当前IR Module，相当于是解释器</li>\n<li>runREPL方法提供给FrontendTool.cpp前端逻辑进行调用，作为REPL的main loop</li>\n</ul>\n</li>\n<li><p>源码文件：Immediate.cpp</p>\n</li>\n</ol>\n<p>实现几个功能：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">loadSwiftRuntime</span><span class=\"params\">(ArrayRef&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&gt; runtimeLibPaths)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">tryLoadLibraries</span><span class=\"params\">(ArrayRef&lt;LinkLibrary&gt; LinkLibraries,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                      SearchPathOptions SearchPathOpts,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                      DiagnosticEngine &amp;Diags)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">linkLLVMModules</span><span class=\"params\">(llvm::Module *Module,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                     <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;llvm::Module&gt; SubModule)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">autolinkImportedModules</span><span class=\"params\">(ModuleDecl *M, <span class=\"keyword\">const</span> IRGenOptions &amp;IRGenOpts)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">swift::RunImmediately</span><span class=\"params\">(CompilerInstance &amp;CI,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          <span class=\"keyword\">const</span> ProcessCmdLine &amp;CmdLine,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          <span class=\"keyword\">const</span> IRGenOptions &amp;IRGenOpts,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          <span class=\"keyword\">const</span> SILOptions &amp;SILOpts,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;SILModule&gt; &amp;&amp;SM)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>加载swift编译器runtime：swiftCore</li>\n<li>llvm ir module间合并</li>\n<li>import module的支持</li>\n<li>RunImmediately：将input翻译成llvm ir，调用<code>llvm::ExecutionEngine</code>直接执行llvm ir\u0018</li>\n</ul>\n<ol start=\"3\">\n<li>源码文件：REPL.cpp</li>\n</ol>\n<p>REPL的主函数，从Frontend.cpp进来，主要由一个读取用户input的main loop，对每个输入进行处理。依赖histedit的支持</p>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference:\"></a>Reference:</h3><p><a href=\"https://blog.csdn.net/weixin_43740680/article/details/98234795\" target=\"_blank\" rel=\"noopener\">What’s REPL</a></p>\n<p><a href=\"https://github.com/apple/swift/blob/master/lib/Immediate/Immediate.cpp\" target=\"_blank\" rel=\"noopener\">Source Code Immediate.cpp</a></p>\n<p><a href=\"https://github.com/apple/swift/blob/master/lib/Immediate/REPL.cpp\" target=\"_blank\" rel=\"noopener\">Source Code REPL.cpp</a></p>\n<p><a href=\"http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/lib/libedit/histedit.h\" target=\"_blank\" rel=\"noopener\">histedit.h: Line editor and history interface.</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck6i3kmm60005fjpohqnvbls2","tag_id":"ck6i3kmmc000bfjpo91mkfst7","_id":"ck6i3kmmd000efjpo53y9dzd5"},{"post_id":"ckgs77ell00002qpof19u44y2","tag_id":"ck6i3kmm50004fjpo9mezf52b","_id":"ckgs77elp00012qpobu09d6d5"},{"post_id":"ckgs77ell00002qpof19u44y2","tag_id":"ck6i3kmm90006fjpo16698ucc","_id":"ckgs77elq00022qpo6msyg1le"},{"post_id":"ckgs77xk600062qpo10zt7424","tag_id":"ck6i3kmm90007fjpo7sxvb4ud","_id":"ckgs77xk800072qpo412cemlr"},{"post_id":"ckgs77xk600062qpo10zt7424","tag_id":"ck6i3kmm50004fjpo9mezf52b","_id":"ckgs77xk800082qpoafuee3dz"}],"Tag":[{"name":"Compiler","_id":"ck6i3kmm50004fjpo9mezf52b"},{"name":"Python","_id":"ck6i3kmm90006fjpo16698ucc"},{"name":"Swift","_id":"ck6i3kmm90007fjpo7sxvb4ud"},{"name":"小白","_id":"ck6i3kmmc000bfjpo91mkfst7"},{"name":"Programming Language","_id":"ckhaqs75i000283po7phjdl6b"},{"name":"Type System","_id":"ckhaqs75k000383po3vig5jwv"},{"name":"Garbage Collection","_id":"ckhaqs75l000483po4kia0ogs"},{"name":"LLVM","_id":"ckhas2f9b0000gspo2o1y61rm"}]}}